// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input, ViewChild } from '@angular/core';
import { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';
import { isEmbedSetupValid } from '../../utils/utils';
import * as i0 from "@angular/core";
/**
 * Report component to embed the report, extends the Base Component
 */
export class PowerBIReportEmbedComponent extends PowerBIEmbedComponent {
    // Getter for this._embed
    get embed() {
        return this._embed;
    }
    // Setter for this._embed
    set embed(newEmbedInstance) {
        this._embed = newEmbedInstance;
    }
    constructor() {
        super();
        // Phased embedding flag (Optional)
        this.phasedEmbedding = false;
    }
    // Returns embed object to calling function
    getReport() {
        return this._embed;
    }
    ngOnInit() {
        // Initialize PowerBI service instance variable from parent
        super.ngOnInit();
    }
    ngOnChanges(changes) {
        if (changes.embedConfig) {
            // Check if the function is being called for the first time
            if (changes.embedConfig.isFirstChange()) {
                return;
            }
            const prevEmbedConfig = changes.embedConfig.previousValue;
            const currentEmbedConfig = changes.embedConfig.currentValue;
            if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {
                // Input from parent get updated, thus call embed function to re-embed the report
                this.embedReport();
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    ngAfterViewInit() {
        // Check if container exists on the UI
        if (this.containerRef.nativeElement) {
            // Decide to embed, load or bootstrap
            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {
                this.embedReport();
            }
            else {
                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    /**
     * Embed or load the PowerBI Report based on phasedEmbedding flag
     *
     * @returns void
     */
    embedReport() {
        if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {
            return;
        }
        // Load when phasedEmbedding flag is true, embed otherwise
        if (this.phasedEmbedding) {
            this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);
        }
        else {
            this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PowerBIReportEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: PowerBIReportEmbedComponent, selector: "powerbi-report[embedConfig]", inputs: { embedConfig: "embedConfig", phasedEmbedding: "phasedEmbedding", eventHandlers: "eventHandlers" }, viewQueries: [{ propertyName: "containerRef", first: true, predicate: ["reportContainer"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #reportContainer></div>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PowerBIReportEmbedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'powerbi-report[embedConfig]',
                    template: '<div class={{cssClassName}} #reportContainer></div>',
                }]
        }], ctorParameters: () => [], propDecorators: { embedConfig: [{
                type: Input
            }], phasedEmbedding: [{
                type: Input
            }], eventHandlers: [{
                type: Input
            }], containerRef: [{
                type: ViewChild,
                args: ['reportContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,