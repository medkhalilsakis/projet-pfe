// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input, ViewChild } from '@angular/core';
import { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';
import { isEmbedSetupValid } from '../../utils/utils';
import * as i0 from "@angular/core";
/**
 * Dashboard component to embed the dashboard, extends the Base component
 */
export class PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent {
    // Getter for this._embed
    get embed() {
        return this._embed;
    }
    // Setter for this._embed
    set embed(newEmbedInstance) {
        this._embed = newEmbedInstance;
    }
    constructor() {
        super();
    }
    // Returns embed object to calling function
    getDashboard() {
        return this.embed;
    }
    ngOnInit() {
        // Initialize PowerBI service instance variable from parent
        super.ngOnInit();
    }
    ngOnChanges(changes) {
        if (changes.embedConfig) {
            // Check if the function is being called for the first time
            if (changes.embedConfig.isFirstChange()) {
                return;
            }
            const prevEmbedConfig = changes.embedConfig.previousValue;
            const currentEmbedConfig = changes.embedConfig.currentValue;
            if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {
                // Input from parent get updated, thus call embedDashboard function
                this.embedDashboard();
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    ngAfterViewInit() {
        // Check if container exists on the UI
        if (this.containerRef.nativeElement) {
            // Decide to embed or bootstrap
            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {
                this.embedDashboard();
            }
            else {
                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    /**
     * Embed the PowerBI Dashboard
     *
     * @returns void
     */
    embedDashboard() {
        if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {
            return;
        }
        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PowerBIDashboardEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: PowerBIDashboardEmbedComponent, selector: "powerbi-dashboard[embedConfig]", inputs: { embedConfig: "embedConfig", eventHandlers: "eventHandlers" }, viewQueries: [{ propertyName: "containerRef", first: true, predicate: ["dashboardContainer"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #dashboardContainer></div>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PowerBIDashboardEmbedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'powerbi-dashboard[embedConfig]',
                    template: '<div class={{cssClassName}} #dashboardContainer></div>',
                }]
        }], ctorParameters: () => [], propDecorators: { embedConfig: [{
                type: Input
            }], eventHandlers: [{
                type: Input
            }], containerRef: [{
                type: ViewChild,
                args: ['dashboardContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,