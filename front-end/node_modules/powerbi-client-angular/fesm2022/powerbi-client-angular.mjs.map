{"version":3,"file":"powerbi-client-angular.mjs","sources":["../../../src/utils/utils.ts","../../../src/components/powerbi-embed/powerbi-embed.component.ts","../../../src/components/powerbi-report-embed/powerbi-report-embed.component.ts","../../../src/components/powerbi-dashboard-embed/powerbi-dashboard-embed.component.ts","../../../src/components/powerbi-tile-embed/powerbi-tile-embed.component.ts","../../../src/components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component.ts","../../../src/components/powerbi-visual-embed/powerbi-visual-embed.component.ts","../../../src/components/powerbi-qna-embed/powerbi-qna-embed.component.ts","../../../src/components/powerbi-create-report/powerbi-create-report.component.ts","../../../src/powerbi-embed.module.ts","../../../src/public-api.ts","../../../src/powerbi-client-angular.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { ElementRef } from '@angular/core';\r\nimport { EventHandler } from '../components/powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Get JSON string representation of the given map.\r\n *\r\n * @param map Map of event and corresponding handler method\r\n *\r\n */\r\nexport const stringifyMap = (map: Map<string, EventHandler | null> | undefined): string => {\r\n  // Return empty string for empty/null map\r\n  if (!map) {\r\n    return '';\r\n  }\r\n\r\n  // Get entries of map as array\r\n  const mapEntries = Array.from(map);\r\n\r\n  // Return JSON string\r\n  return JSON.stringify(\r\n    mapEntries.map((mapEntry) =>\r\n      // Convert event handler method to a string containing its source code for comparison\r\n      [mapEntry[0], mapEntry[1] ? mapEntry[1].toString() : '']\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Check if the container element, access token, and embed URL are available.\r\n *\r\n * @param containerRef Reference to the container element\r\n * @param embedConfig Configuration object for the embed, containing access token and embed URL\r\n *\r\n */\r\nexport const isEmbedSetupValid = (containerRef: ElementRef<HTMLDivElement>, embedConfig: any): boolean => {\r\n  return !!containerRef.nativeElement && !!embedConfig.accessToken && !!embedConfig.embedUrl;\r\n}\r\n\r\n// SDK information to be used with service instance\r\nexport const sdkType = 'powerbi-client-angular';\r\nexport const sdkWrapperVersion = '5.0.0';\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { Embed, factories, service } from 'powerbi-client';\r\nimport { stringifyMap, sdkType, sdkWrapperVersion } from '../../utils/utils';\r\n\r\n/**\r\n * Type for event handler function of embedded entity\r\n */\r\nexport type EventHandler = (event?: service.ICustomEvent<any>, embeddedEntity?: Embed) => void | null;\r\n\r\n/**\r\n * Base component to hold common properties for all the Power BI entities\r\n */\r\n@Component({\r\n  selector: 'powerbi-embed',\r\n  template: '',\r\n})\r\nexport class PowerBIEmbedComponent implements OnInit {\r\n  // Power BI service instance to be used if user doesnt provide custom service\r\n  private static _powerbi: service.Service;\r\n\r\n  // Input() specify the properties that will be passed from the parent\r\n  // CSS class to be set on the embedding container (Optional)\r\n  @Input() cssClassName?: string;\r\n\r\n  // Provide a custom implementation of Power BI service (Optional)\r\n  @Input() service?: service.Service;\r\n\r\n  // Power BI service\r\n  powerbi!: service.Service;\r\n\r\n  // JSON stringify of prev event handler map\r\n  private prevEventHandlerMapString = '';\r\n\r\n  ngOnInit(): void {\r\n    // Initialize powerbi variable for child component\r\n    if (this.service) {\r\n      this.powerbi = this.service;\r\n    } else {\r\n      if (!PowerBIEmbedComponent._powerbi) {\r\n        PowerBIEmbedComponent._powerbi = new service.Service(\r\n          factories.hpmFactory,\r\n          factories.wpmpFactory,\r\n          factories.routerFactory);\r\n      }\r\n      this.powerbi = PowerBIEmbedComponent._powerbi;\r\n    }\r\n\r\n    this.powerbi.setSdkInfo(sdkType, sdkWrapperVersion);\r\n  }\r\n\r\n  /**\r\n   * Sets all event handlers from the input on the embedded entity\r\n   *\r\n   * @param embed Embedded object\r\n   * @param eventHandlerMap Array of event handlers to be set on embedded entity\r\n   * @returns void\r\n   */\r\n  protected setEventHandlers(embed: Embed, eventHandlerMap: Map<string, EventHandler | null>): void {\r\n    // Get string representation of eventHandlerMap\r\n    const eventHandlerMapString = stringifyMap(eventHandlerMap);\r\n\r\n    // Check if event handler map changed\r\n    if (this.prevEventHandlerMapString === eventHandlerMapString) {\r\n      return;\r\n    }\r\n\r\n    // Update prev string representation of event handler map\r\n    this.prevEventHandlerMapString = eventHandlerMapString;\r\n\r\n    // Apply all provided event handlers\r\n    eventHandlerMap.forEach((eventHandlerMethod, eventName) => {\r\n      // Removes event handler for this event\r\n      embed.off(eventName);\r\n\r\n      // Event handler is effectively removed for this event when eventHandlerMethod is null\r\n      if (eventHandlerMethod) {\r\n        // Set single event handler\r\n        embed.on(eventName, (event: service.ICustomEvent<any>): void => {\r\n          eventHandlerMethod(event, embed);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IReportEmbedConfiguration, Report } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Report component to embed the report, extends the Base Component\r\n */\r\n@Component({\r\n  selector: 'powerbi-report[embedConfig]',\r\n  template: '<div class={{cssClassName}} #reportContainer></div>',\r\n})\r\nexport class PowerBIReportEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Report (Required)\r\n  @Input() embedConfig!: IReportEmbedConfiguration;\r\n\r\n  // Phased embedding flag (Optional)\r\n  @Input() phasedEmbedding?: boolean = false;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('reportContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getReport(): Report {\r\n    return this._embed as Report;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IReportEmbedConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IReportEmbedConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embed function to re-embed the report\r\n        this.embedReport();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed, load or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedReport();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed or load the PowerBI Report based on phasedEmbedding flag\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedReport(): void {\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    // Load when phasedEmbedding flag is true, embed otherwise\r\n    if (this.phasedEmbedding) {\r\n      this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);\r\n    } else {\r\n      this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Dashboard, Embed, IDashboardEmbedConfiguration } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Dashboard component to embed the dashboard, extends the Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-dashboard[embedConfig]',\r\n  template: '<div class={{cssClassName}} #dashboardContainer></div>',\r\n})\r\nexport class PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Dashboard (Required)\r\n  @Input() embedConfig!: IDashboardEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('dashboardContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getDashboard(): Dashboard {\r\n    return this.embed as Dashboard;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IDashboardEmbedConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IDashboardEmbedConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedDashboard function\r\n        this.embedDashboard();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedDashboard();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Dashboard\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedDashboard(): void {\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, ITileEmbedConfiguration, Tile } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Tile component to embed the tile, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-tile[embedConfig]',\r\n  template: '<div class={{cssClassName}} #tileContainer></div>',\r\n})\r\nexport class PowerBITileEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Tile (Required)\r\n  @Input() embedConfig!: ITileEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('tileContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getTile(): Tile {\r\n    return this._embed as Tile;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: ITileEmbedConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: ITileEmbedConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedTile function\r\n        this.embedTile();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedTile();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Tile\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedTile(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement || !this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed } from 'powerbi-client';\r\nimport { IPaginatedReportLoadConfiguration } from 'powerbi-models';\r\nimport { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Paginated report component to embed the entity, extends the Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-paginated-report[embedConfig]',\r\n  template: '<div class={{cssClassName}} #paginatedReportContainer></div>',\r\n})\r\nexport class PowerBIPaginatedReportEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Paginated report (Required)\r\n  @Input() embedConfig!: IPaginatedReportLoadConfiguration;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('paginatedReportContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IPaginatedReportLoadConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IPaginatedReportLoadConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedPaginatedReport function\r\n        this.embedPaginatedReport();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed\r\n      this.embedPaginatedReport();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Paginated report\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedPaginatedReport(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    // Embed paginated report\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IVisualEmbedConfiguration, Visual } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Visual component to embed the visual, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-visual[embedConfig]',\r\n  template: '<div class={{cssClassName}} #visualContainer></div>',\r\n})\r\nexport class PowerBIVisualEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Visual (Required)\r\n  @Input() embedConfig!: IVisualEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('visualContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getVisual(): Visual {\r\n    return this._embed as Visual;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IVisualEmbedConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IVisualEmbedConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedVisual function\r\n        this.embedVisual();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedVisual();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Visual\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedVisual(): void {\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IQnaEmbedConfiguration, Qna } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Qna component to embed the Qna visual, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-qna[embedConfig]',\r\n  template: '<div class={{cssClassName}} #qnaContainer></div>',\r\n})\r\nexport class PowerBIQnaEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Qna visual (Required)\r\n  @Input() embedConfig!: IQnaEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('qnaContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getQna(): Qna {\r\n    return this._embed as Qna;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IQnaEmbedConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IQnaEmbedConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedQnaVisual function\r\n        this.embedQnaVisual();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedQnaVisual();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI QnA Visual\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedQnaVisual(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, Create } from 'powerbi-client';\r\nimport { IReportCreateConfiguration } from 'powerbi-models';\r\n\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\nimport { isEmbedSetupValid } from '../../utils/utils';\r\n\r\n/**\r\n * Create report component to embed the entity, extends the Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-create-report[embedConfig]',\r\n  template: '<div class={{cssClassName}} #createReportContainer></div>',\r\n})\r\nexport class PowerBICreateReportEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Configuration for embedding the PowerBI Create report (Required)\r\n  @Input() embedConfig!: IReportCreateConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('createReportContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  public getCreateObject(): Create {\r\n    return this._embed as Create;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      // Check if the function is being called for the first time\r\n      if (changes.embedConfig.isFirstChange()) {\r\n        return;\r\n      }\r\n\r\n      const prevEmbedConfig: IReportCreateConfiguration = changes.embedConfig.previousValue;\r\n      const currentEmbedConfig: IReportCreateConfiguration = changes.embedConfig.currentValue;\r\n      if (JSON.stringify(prevEmbedConfig) !== JSON.stringify(currentEmbedConfig)) {\r\n        // Input from parent get updated, thus call embedCreateReport function\r\n        this.embedCreateReport();\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    // Decide to embed\r\n    this.embedCreateReport();\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Create report\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedCreateReport(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!isEmbedSetupValid(this.containerRef, this.embedConfig)) {\r\n      return;\r\n    }\r\n\r\n    // Embed create report\r\n    this.embed = this.powerbi.createReport(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { PowerBIEmbedComponent } from './components/powerbi-embed/powerbi-embed.component';\r\nimport { PowerBIDashboardEmbedComponent } from './components/powerbi-dashboard-embed/powerbi-dashboard-embed.component';\r\nimport { PowerBIPaginatedReportEmbedComponent } from './components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component';\r\nimport { PowerBIQnaEmbedComponent } from './components/powerbi-qna-embed/powerbi-qna-embed.component';\r\nimport { PowerBIReportEmbedComponent } from './components/powerbi-report-embed/powerbi-report-embed.component';\r\nimport { PowerBITileEmbedComponent } from './components/powerbi-tile-embed/powerbi-tile-embed.component';\r\nimport { PowerBIVisualEmbedComponent } from './components/powerbi-visual-embed/powerbi-visual-embed.component';\r\nimport { PowerBICreateReportEmbedComponent } from './components/powerbi-create-report/powerbi-create-report.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PowerBIEmbedComponent,\r\n    PowerBIDashboardEmbedComponent,\r\n    PowerBIPaginatedReportEmbedComponent,\r\n    PowerBIQnaEmbedComponent,\r\n    PowerBIReportEmbedComponent,\r\n    PowerBITileEmbedComponent,\r\n    PowerBIVisualEmbedComponent,\r\n    PowerBICreateReportEmbedComponent\r\n  ],\r\n  imports: [],\r\n  exports: [\r\n    PowerBIDashboardEmbedComponent,\r\n    PowerBIPaginatedReportEmbedComponent,\r\n    PowerBIQnaEmbedComponent,\r\n    PowerBIReportEmbedComponent,\r\n    PowerBITileEmbedComponent,\r\n    PowerBIVisualEmbedComponent,\r\n    PowerBICreateReportEmbedComponent\r\n  ],\r\n})\r\nexport class PowerBIEmbedModule {}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n/*\r\n * Public API Surface of powerbi-client-angular\r\n */\r\n\r\nexport * from './components/powerbi-report-embed/powerbi-report-embed.component';\r\nexport * from './components/powerbi-dashboard-embed/powerbi-dashboard-embed.component';\r\nexport * from './components/powerbi-tile-embed/powerbi-tile-embed.component';\r\nexport * from './components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component';\r\nexport * from './components/powerbi-visual-embed/powerbi-visual-embed.component';\r\nexport * from './components/powerbi-qna-embed/powerbi-qna-embed.component';\r\nexport * from './components/powerbi-create-report/powerbi-create-report.component';\r\nexport * from './powerbi-embed.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}