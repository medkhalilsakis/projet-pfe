import { MbscRecurrenceRule } from '../../util/recurrence.types.public';
import { CalendarViewBase } from './calendar-view';
import { ICalendarData, ICalendarViewHost } from './calendar-view.types';
export interface MbscResource {
    [x: string]: any;
    /**
     * Depth of the resource in the resource tree.
     * @hidden
     */
    depth?: number;
    /**
     * Will be true for resources with children.
     * @hidden
     */
    isParent?: boolean;
    /**
     * The original resource object.
     * @hidden
     */
    original?: MbscResource;
    /** The id of the resource. */
    id: number | string;
    /** Specifies the name of the resource. */
    name?: string;
    /** Specifies the background color of the resource row or column. */
    background?: string;
    /** Specifies the displayed state of the child resource group. */
    collapsed?: boolean;
    /**
     * Specifies the default event color of the resource.
     * If an event has an explicit color set, the resource color will be overridden.
     * If the color is not set, the events of the resource will inherit the default calendar color.
     */
    color?: string;
    /** Specifies a css class for the resource row or column. */
    cssClass?: string;
    /**
     * Specifies whether the resource is fixed to the top.
     * It applies for timeline view if `resolutionVertical` in [view](#opt-view) option is not given, or it's value is set to `none`.
     * Consider that the fixed resources always have to be the first elements of the array in a sequence
     * (no non-fixed resources inserted in between) so that the drag&drop and event creation functionalities to work properly.
     */
    fixed?: boolean;
    /** Child resources. */
    children?: MbscResource[];
    /** Disables event creation on specific resources by setting it to false. Defaults to true. */
    eventCreation?: boolean;
    /**
     * Specifies whether the events in this resource are movable across resources.
     * It applies for scheduler and timeline views.
     * Has precedence over the [dragBetweenResources](#opt-dragBetweenResources) option.
     */
    eventDragBetweenResources?: boolean;
    /**
     * Specifies whether the events in this slot are movable across slots.
     * Has precedence over the [dragBetweenSlots](#opt-dragBetweenSlots) option.
     */
    eventDragBetweenSlots?: boolean;
    /**
     * Specifies whether the events in this resource are movable in time.
     * Has precedence over the [dragInTime](#opt-dragInTime) option.
     */
    eventDragInTime?: boolean;
    /**
     * Specifies whether the events in this resource can be overlapped.
     * Has precedence over the [eventOverlap](#opt-eventOverlap) option.
     */
    eventOverlap?: boolean;
    /**
     * Specifies whether the events in this resource are resizable.
     * Has precedence over the [dragToResize](#opt-dragToResize) option.
     */
    eventResize?: boolean;
    /**
     * Specifies whether the resource can be dragged and reordered.
     * It applies for timeline view if `resourceReorder` in [view](#opt-view) option is enabled.
     */
    reorder?: boolean;
}
export interface MbscSlot {
    [x: string]: any;
    /** The id of the slot. It that can be referenced in the events/invalids/colors data. */
    id: number | string;
    /** The name of the slot that will be displayed at the top of the slot column. */
    name?: string;
    /** Specifies whether the event is movable across slots. */
    eventDragBetweenSlots?: boolean;
}
export interface MbscCalendarMarked extends ICalendarData {
    /** Color of the mark. */
    color?: string;
    /** CSS class for the mark. */
    markCssClass?: string;
}
export interface MbscCalendarColor extends ICalendarData {
    /** Specifies a single date for the color */
    date?: Date | string | object;
    /** Specifies the start date/time of a date/time range for the color */
    start?: Date | string | object;
    /** Specifies the end date/time of a date/time range for the color */
    end?: Date | string | object;
    /** Specifies whether the date you want to color is all day or not. */
    allDay?: boolean;
    /** Background color of the cell. It can be any valid CSS color (`'red'`, `'#ff0000'`, `'rgb(255, 0, 0)'`, etc.). */
    background?: string;
    /**
     * Specifies a custom CSS class for the color.
     * Useful when customization is needed for the background of cells and time ranges.
     * Only applicable for the timeline and scheduler views.
     */
    cssClass?: string;
    /** Highlight color of the day, can be any valid CSS color (`'red'`, `'#ff0000'`, `'rgb(255, 0, 0)'`, etc.). */
    highlight?: string;
    /**
     * In case of the timeline and scheduler view of the Eventcalendar, specifies the [resource](#opt-resources) ids
     * for the color.
     * The color will be displayed only on the specified resource.
     * If there is no resource defined, it will be applied to every resource.
     */
    resource?: string | number | Array<string | number>;
    /**
     * In case of the timeline view of the Eventcalendar, specifies the [slot](#opt-slot) id
     * for the color.
     * The color will be displayed only on the specified slot.
     * If there is no slot defined, it will be applied to every slot.
     */
    slot?: string | number;
}
export interface MbscCalendarLabel extends ICalendarData {
    /** Specifies a single date for the label */
    date?: Date | string | object;
    /** Specifies the start date/time of a date/time range for the label */
    start?: Date | string | object;
    /** Specifies the end date/time of a date/time range for the label */
    end?: Date | string | object;
    /** Background color of the label. */
    color?: string;
    /** Specifies a custom CSS class that is applied to the label. */
    cssClass?: string;
    /** Specifies the order of the label in the array. Has precedence over the default ordering rules. */
    order?: number;
    /**
     * Text of the label. It's the same as the title. It's listed only for backward compatibility reasons.
     * @hidden
     */
    text?: string;
    /** The title of the label. */
    title?: string;
    /** Tooltip for the label */
    tooltip?: string;
    /** @hidden */
    id?: string | number;
    /** @hidden */
    editable?: boolean;
    /** @hidden */
    resize?: boolean;
    /** @hidden */
    resource?: string | number | Array<string | number>;
}
export interface MbscCalendarEvent extends MbscCalendarLabel {
    /** Specifies a single date for the event */
    date?: Date | string | object;
    /** Specifies the start date/time of a date/time range for the event */
    start?: Date | string | object;
    /** Specifies the end date/time of a date/time range for the event */
    end?: Date | string | object;
    /** Specifies if the event is all day or not. */
    allDay?: boolean;
    /** Defines a buffer time in minutes that will be displayed after the end of the event. */
    bufferAfter?: number;
    /** Defines a buffer time in minutes that will be displayed before the start of the event. */
    bufferBefore?: number;
    /** Background color of the event */
    color?: string;
    /**
     * Specifies a custom CSS class that is applied to the event. Useful when customization is needed on the event level.
     * For example: setting the width for specific events.
     */
    cssClass?: string;
    /** Specifies whether the event is movable across resources. */
    dragBetweenResources?: boolean;
    /** Specifies whether the event is movable across across slots. */
    dragBetweenSlots?: boolean;
    /** Specifies whether the event is movable in time. */
    dragInTime?: boolean;
    /** Specifies if an event is editable or not. If false, drag & drop and resize is not allowed. */
    editable?: boolean;
    /** A unique id for the event. If not specified, the event will get a generated id. */
    id?: string | number;
    /** Specifies the order of the event in the array. Has precedence over the default ordering rules. */
    order?: number;
    /**
     * Specifies whether the event can be overlapped. Has precedence over the `eventOverlap`
     * property of the resource and the [eventOverlap](#opt-eventOverlap) option.
     */
    overlap?: boolean;
    /** Specifies a recurrence rule for handling recurring events. */
    recurring?: MbscRecurrenceRule | string;
    /**
     * Specifies whether the event is resizable.
     * Has precedence over the `eventResize` property of the resource and
     * the [dragToResize](#opt-dragToResize) option.
     */
    resize?: boolean;
    /**
     * In case of the timeline and scheduler view of the Eventcalendar, specifies the [resource](#opt-resources) ids
     * for the event.
     * The event will be displayed only on the specified resource.
     * If there is no resource defined, it will be displayed on every resource.
     */
    resource?: string | number | Array<string | number>;
    /**
     * In case of the timeline view of the Eventcalendar, specifies the [slot](#opt-slot) id
     * for the event.
     * The event will be displayed only on the specified slot.
     * If there is no slot defined, it will be displayed on every slot.
     */
    slot?: string | number;
    /**
     * Text of the Event. It's the same as the title. It's listed only for backward compatibility reasons.
     * @hidden
     */
    text?: string;
    /** The title of the event. */
    title?: string;
    /** Timezone of the event */
    timezone?: string;
    /** The tooltip text of the event. */
    tooltip?: string;
    /** @hidden */
    background?: string;
}
export interface MbscCalendarEventData {
    allDay?: boolean;
    allDayText?: string;
    ariaLabel?: string;
    bufferAfter?: string;
    bufferBefore?: string;
    bufferStart?: Date;
    bufferEnd?: Date;
    color?: string;
    cssClass?: string;
    currentResource?: MbscResource;
    currentSlot?: MbscSlot;
    date: number;
    end?: string;
    endDate: Date;
    html?: any;
    id?: any;
    isMultiDay?: boolean;
    key?: string;
    lastDay?: string;
    layoutStart?: number;
    layoutEnd?: number;
    offset?: number;
    original?: MbscCalendarEvent;
    position?: any;
    resource?: number | string | Array<number | string>;
    showText?: boolean;
    slot?: number | string;
    track?: number;
    start?: string;
    startDate: Date;
    style?: any;
    title?: string;
    tooltip?: string;
    uid?: string | number;
}
export interface MbscCalendarHeaderOptions {
    calendar?: ICalendarViewHost;
    className?: string;
    view?: CalendarViewBase;
}
export interface MbscCalendarDayData {
    date: Date;
    endDate?: Date;
    events?: MbscCalendarEvent[];
    isActive?: boolean;
    selected?: boolean;
    resource?: number | string;
    startDate?: Date;
    weekNr?: number;
}
