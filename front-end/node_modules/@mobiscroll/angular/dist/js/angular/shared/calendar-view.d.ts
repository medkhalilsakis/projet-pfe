import { ElementRef, TemplateRef } from '@angular/core';
import { MbscCalendarNavService } from '../../core/shared/calendar-nav/calendar-nav';
import { CalendarViewBase } from '../../core/shared/calendar-view/calendar-view';
import { ILabelDragData, MbscCalendarColor, MbscCalendarEvent, MbscCalendarLabel, MbscCalendarMarked, MbscResource, ViewType } from '../../core/shared/calendar-view/calendar-view.types';
import { InstanceServiceBase } from '../../core/shared/instance-service';
import { MbscDateType, MbscTimezonePlugin } from '../../core/util/datetime.types.public';
import { noop } from '../../core/util/misc';
import * as i0 from "@angular/core";
/** @hidden */
export declare class MbscCalendarView extends CalendarViewBase {
    vBody: ElementRef;
    vPickerCont: ElementRef;
    activeDate?: number;
    cssClass?: string;
    clickToCreate?: boolean | 'double' | 'single';
    colors?: MbscCalendarColor[];
    dataTimezone?: string;
    dayTemplate?: TemplateRef<any>;
    dayContentTemplate?: TemplateRef<any>;
    displayTimezone?: string;
    dragToCreate?: boolean;
    dragToResize?: boolean;
    dragToMove?: boolean;
    endDay?: number;
    eventExact?: boolean;
    eventMap?: {
        [key: string]: MbscCalendarEvent[];
    };
    eventOrder?: (event1: MbscCalendarLabel, event2: MbscCalendarLabel) => number;
    eventRange?: 'year' | 'month' | 'week' | 'day';
    eventRangeSize?: number;
    exclusiveEndDates?: boolean;
    fromText?: string;
    hasContent?: boolean;
    hasPicker?: boolean;
    headerTemplate?: TemplateRef<any>;
    height?: number | string;
    hoverEnd?: number;
    hoverStart?: number;
    invalid?: any[];
    instanceService?: InstanceServiceBase;
    isPicker?: boolean;
    labels?: MbscCalendarLabel[];
    labelsMap?: {
        [key: string]: MbscCalendarEvent[];
    };
    labelTemplate?: TemplateRef<any>;
    labelContentTemplate?: TemplateRef<any>;
    dragData?: ILabelDragData;
    max?: MbscDateType;
    marked?: MbscCalendarMarked[];
    marksMap?: {
        [key: string]: MbscCalendarEvent[];
    };
    min?: MbscDateType;
    mouseSwipe?: boolean;
    mousewheel?: boolean;
    navService?: MbscCalendarNavService;
    navView?: ViewType;
    noOuterChange?: boolean;
    downIcon?: string;
    nextIconH?: string;
    nextIconV?: string;
    nextPageText?: string;
    prevIconH?: string;
    prevIconV?: string;
    prevPageText?: string;
    upIcon?: string;
    pages?: number | 'auto';
    pageLoad?: number;
    refDate?: MbscDateType;
    resourcesMap?: {
        [key: number]: MbscResource;
    };
    rangeEnd?: number;
    rangeStart?: number;
    responsiveStyle?: boolean;
    selectedDates?: {
        [key: number]: boolean | Date;
    };
    selectedEventsMap?: {
        [key: number]: MbscCalendarEvent;
    };
    selectView?: ViewType;
    showCalendar?: boolean;
    showControls?: boolean;
    showEventTooltip?: boolean;
    showLabelCount?: boolean;
    showOuterDays?: boolean;
    showSchedule?: boolean;
    showToday?: boolean;
    showWeekNumbers?: boolean;
    size?: number;
    startDay?: number;
    swipe?: boolean;
    labelList?: 'all' | boolean | number;
    timeFormat?: string;
    timezonePlugin?: MbscTimezonePlugin;
    update?: number;
    valid?: any[];
    weeks?: number;
    width?: number | string;
    calendarScroll?: 'horizontal' | 'vertical';
    calendarType?: 'year' | 'month' | 'week';
    getDate?: (y: number, m: number, d: number) => Date;
    getDay?: (d: Date) => number;
    getMaxDayOfMonth?: (y: number, m: number) => number;
    getMonth?: (d: Date) => number;
    getWeekNumber?: (d: Date) => number;
    getYear?: (d: Date) => number;
    amText?: string;
    dateFormat?: string;
    dayNames?: string[];
    dayNamesMin?: string[];
    dayNamesShort?: string[];
    eventText?: string;
    eventsText?: string;
    firstDay?: number;
    monthNames?: string[];
    monthNamesShort?: string[];
    moreEventsPluralText?: string;
    moreEventsText?: string;
    pmText?: string;
    todayText?: string;
    toText?: string;
    weekText?: string;
    yearSuffix?: string;
    onActiveChange?: (args: any, inst: any) => void;
    onCellHoverIn?: (args: any, inst: any) => void;
    onCellHoverOut?: (args: any, inst: any) => void;
    onDayClick?: (args: any, inst: any) => void;
    onDayDoubleClick?: (args: any, inst: any) => void;
    onDayRightClick?: (args: any, inst: any) => void;
    onDayHoverIn?: (args: any, inst: any) => void;
    onDayHoverOut?: (args: any, inst: any) => void;
    onGestureStart?: (args: any, inst: any) => void;
    onLabelClick?: (args: any, inst: any) => void;
    onLabelDoubleClick?: (args: any, inst: any) => void;
    onLabelRightClick?: (args: any, inst: any) => void;
    onLabelHoverIn?: (args: any, inst: any) => void;
    onLabelHoverOut?: (args: any, inst: any) => void;
    onLabelDelete?: (args: any, inst: any) => void;
    onLabelUpdateStart?: (args: any, inst: any) => void;
    onLabelUpdateMove?: (args: any, inst: any) => void;
    onLabelUpdateEnd?: (args: any, inst: any) => void;
    onLabelUpdateModeOn?: (args: any, inst: any) => void;
    onLabelUpdateModeOff?: (args: any, inst: any) => void;
    onPageChange?: (args: any, inst: any) => void;
    onPageLoaded?: (args: any, inst: any) => void;
    onPageLoading?: (args: any, inst: any) => void;
    onResize?: (args: any, inst: any) => void;
    onTodayClick?: (args: any, inst: any) => void;
    _noop: typeof noop;
    _getFirstDay(): number;
    _getMonthName(item: number): string;
    protected _mounted(): void;
    protected _updated(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscCalendarView, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscCalendarView, "mbsc-calendar-view", never, { "activeDate": "activeDate"; "cssClass": "cssClass"; "clickToCreate": "clickToCreate"; "colors": "colors"; "dataTimezone": "dataTimezone"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "displayTimezone": "displayTimezone"; "dragToCreate": "dragToCreate"; "dragToResize": "dragToResize"; "dragToMove": "dragToMove"; "endDay": "endDay"; "eventExact": "eventExact"; "eventMap": "eventMap"; "eventOrder": "eventOrder"; "eventRange": "eventRange"; "eventRangeSize": "eventRangeSize"; "exclusiveEndDates": "exclusiveEndDates"; "fromText": "fromText"; "hasContent": "hasContent"; "hasPicker": "hasPicker"; "headerTemplate": "headerTemplate"; "height": "height"; "hoverEnd": "hoverEnd"; "hoverStart": "hoverStart"; "invalid": "invalid"; "instanceService": "instanceService"; "isPicker": "isPicker"; "labels": "labels"; "labelsMap": "labelsMap"; "labelTemplate": "labelTemplate"; "labelContentTemplate": "labelContentTemplate"; "dragData": "dragData"; "max": "max"; "marked": "marked"; "marksMap": "marksMap"; "min": "min"; "mouseSwipe": "mouseSwipe"; "mousewheel": "mousewheel"; "navService": "navService"; "navView": "navView"; "noOuterChange": "noOuterChange"; "downIcon": "downIcon"; "nextIconH": "nextIconH"; "nextIconV": "nextIconV"; "nextPageText": "nextPageText"; "prevIconH": "prevIconH"; "prevIconV": "prevIconV"; "prevPageText": "prevPageText"; "upIcon": "upIcon"; "pages": "pages"; "pageLoad": "pageLoad"; "refDate": "refDate"; "resourcesMap": "resourcesMap"; "rangeEnd": "rangeEnd"; "rangeStart": "rangeStart"; "responsiveStyle": "responsiveStyle"; "selectedDates": "selectedDates"; "selectedEventsMap": "selectedEventsMap"; "selectView": "selectView"; "showCalendar": "showCalendar"; "showControls": "showControls"; "showEventTooltip": "showEventTooltip"; "showLabelCount": "showLabelCount"; "showOuterDays": "showOuterDays"; "showSchedule": "showSchedule"; "showToday": "showToday"; "showWeekNumbers": "showWeekNumbers"; "size": "size"; "startDay": "startDay"; "swipe": "swipe"; "labelList": "labelList"; "timeFormat": "timeFormat"; "timezonePlugin": "timezonePlugin"; "update": "update"; "valid": "valid"; "weeks": "weeks"; "width": "width"; "calendarScroll": "calendarScroll"; "calendarType": "calendarType"; "getDate": "getDate"; "getDay": "getDay"; "getMaxDayOfMonth": "getMaxDayOfMonth"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "amText": "amText"; "dateFormat": "dateFormat"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "eventText": "eventText"; "eventsText": "eventsText"; "firstDay": "firstDay"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "moreEventsPluralText": "moreEventsPluralText"; "moreEventsText": "moreEventsText"; "pmText": "pmText"; "todayText": "todayText"; "toText": "toText"; "weekText": "weekText"; "yearSuffix": "yearSuffix"; "onActiveChange": "onActiveChange"; "onCellHoverIn": "onCellHoverIn"; "onCellHoverOut": "onCellHoverOut"; "onDayClick": "onDayClick"; "onDayDoubleClick": "onDayDoubleClick"; "onDayRightClick": "onDayRightClick"; "onDayHoverIn": "onDayHoverIn"; "onDayHoverOut": "onDayHoverOut"; "onGestureStart": "onGestureStart"; "onLabelClick": "onLabelClick"; "onLabelDoubleClick": "onLabelDoubleClick"; "onLabelRightClick": "onLabelRightClick"; "onLabelHoverIn": "onLabelHoverIn"; "onLabelHoverOut": "onLabelHoverOut"; "onLabelDelete": "onLabelDelete"; "onLabelUpdateStart": "onLabelUpdateStart"; "onLabelUpdateMove": "onLabelUpdateMove"; "onLabelUpdateEnd": "onLabelUpdateEnd"; "onLabelUpdateModeOn": "onLabelUpdateModeOn"; "onLabelUpdateModeOff": "onLabelUpdateModeOff"; "onPageChange": "onPageChange"; "onPageLoaded": "onPageLoaded"; "onPageLoading": "onPageLoading"; "onResize": "onResize"; "onTodayClick": "onTodayClick"; }, {}, never, ["*"]>;
}
