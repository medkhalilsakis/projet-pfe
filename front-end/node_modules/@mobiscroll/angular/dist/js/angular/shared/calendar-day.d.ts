import { ElementRef, TemplateRef } from '@angular/core';
import { CalendarDayBase } from '../../core/shared/calendar-view/calendar-day';
import { ICalendarProcessedLabel, ILabelDragData, MbscCalendarEvent, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { computeEventResize } from '../../core/shared/calendar-view/calendar-view.util';
import { MbscTimezonePlugin } from '../../core/util/datetime.types.public';
import * as i0 from "@angular/core";
/** @hidden */
export declare class MbscCalendarDay extends CalendarDayBase {
    active?: boolean;
    amText?: string;
    clickToCreate?: boolean | 'double' | 'single';
    colors?: any;
    dataTimezone?: string;
    date?: number;
    day?: string;
    dayTemplate?: TemplateRef<any>;
    dayContentTemplate?: TemplateRef<any>;
    disabled?: boolean;
    display?: boolean;
    displayTimezone?: string;
    dragToCreate?: boolean;
    dragToResize?: boolean;
    dragToMove?: boolean;
    eventText?: string;
    events?: MbscCalendarEvent[];
    eventsText?: string;
    exclusiveEndDates?: boolean;
    firstDay?: number;
    hasMarks?: boolean;
    hoverEnd?: number;
    hoverStart?: number;
    isActiveMonth?: boolean;
    isPicker?: boolean;
    labels?: any;
    labelTemplate?: TemplateRef<any>;
    labelContentTemplate?: TemplateRef<any>;
    dragData?: ILabelDragData;
    marks?: any;
    month?: string;
    monthShort?: string;
    outer?: boolean;
    pmText?: string;
    rangeEnd?: number;
    rangeStart?: number;
    resourcesMap?: {
        [key: number]: MbscResource;
    };
    selected?: boolean;
    selectedEventsMap?: {
        [key: string]: MbscCalendarEvent;
    };
    showEventTooltip?: boolean;
    text?: string;
    timeFormat?: string;
    timezonePlugin?: MbscTimezonePlugin;
    todayText?: string;
    type?: 'day' | 'month' | 'year';
    year?: number;
    onDayClick?: (args: any, inst: any) => void;
    onDayDoubleClick?: (args: any, inst: any) => void;
    onDayRightClick?: (args: any, inst: any) => void;
    onHoverIn?: (args: any, inst: any) => void;
    onHoverOut?: (args: any, inst: any) => void;
    onLabelClick?: (args: any, inst: any) => void;
    onLabelDoubleClick?: (args: any, inst: any) => void;
    onLabelRightClick?: (args: any, inst: any) => void;
    onLabelHoverIn?: (args: any, inst: any) => void;
    onLabelHoverOut?: (args: any, inst: any) => void;
    onLabelDelete?: (args: any, inst: any) => void;
    onLabelUpdateStart?: (args: any, inst: any) => void;
    onLabelUpdateMove?: (args: any, inst: any) => void;
    onLabelUpdateEnd?: (args: any, inst: any) => void;
    onLabelUpdateModeOn?: (args: any, inst: any) => void;
    onLabelUpdateModeOff?: (args: any, inst: any) => void;
    _computeEventResize: typeof computeEventResize;
    set vBtn(btn: ElementRef);
    _getLabelKey(index: number, label: ICalendarProcessedLabel): string | number;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscCalendarDay, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscCalendarDay, "mbsc-calendar-day", never, { "active": "active"; "amText": "amText"; "clickToCreate": "clickToCreate"; "colors": "colors"; "dataTimezone": "dataTimezone"; "date": "date"; "day": "day"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "disabled": "disabled"; "display": "display"; "displayTimezone": "displayTimezone"; "dragToCreate": "dragToCreate"; "dragToResize": "dragToResize"; "dragToMove": "dragToMove"; "eventText": "eventText"; "events": "events"; "eventsText": "eventsText"; "exclusiveEndDates": "exclusiveEndDates"; "firstDay": "firstDay"; "hasMarks": "hasMarks"; "hoverEnd": "hoverEnd"; "hoverStart": "hoverStart"; "isActiveMonth": "isActiveMonth"; "isPicker": "isPicker"; "labels": "labels"; "labelTemplate": "labelTemplate"; "labelContentTemplate": "labelContentTemplate"; "dragData": "dragData"; "marks": "marks"; "month": "month"; "monthShort": "monthShort"; "outer": "outer"; "pmText": "pmText"; "rangeEnd": "rangeEnd"; "rangeStart": "rangeStart"; "resourcesMap": "resourcesMap"; "selected": "selected"; "selectedEventsMap": "selectedEventsMap"; "showEventTooltip": "showEventTooltip"; "text": "text"; "timeFormat": "timeFormat"; "timezonePlugin": "timezonePlugin"; "todayText": "todayText"; "type": "type"; "year": "year"; "onDayClick": "onDayClick"; "onDayDoubleClick": "onDayDoubleClick"; "onDayRightClick": "onDayRightClick"; "onHoverIn": "onHoverIn"; "onHoverOut": "onHoverOut"; "onLabelClick": "onLabelClick"; "onLabelDoubleClick": "onLabelDoubleClick"; "onLabelRightClick": "onLabelRightClick"; "onLabelHoverIn": "onLabelHoverIn"; "onLabelHoverOut": "onLabelHoverOut"; "onLabelDelete": "onLabelDelete"; "onLabelUpdateStart": "onLabelUpdateStart"; "onLabelUpdateMove": "onLabelUpdateMove"; "onLabelUpdateEnd": "onLabelUpdateEnd"; "onLabelUpdateModeOn": "onLabelUpdateModeOn"; "onLabelUpdateModeOff": "onLabelUpdateModeOff"; }, {}, never, never>;
}
