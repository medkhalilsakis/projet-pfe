import { TemplateRef } from '@angular/core';
import { ILabelDragData, MbscCalendarEvent, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { MonthViewBase } from '../../core/shared/calendar-view/month-view';
import { MbscTimezonePlugin } from '../../core/util/datetime.types.public';
import * as i0 from "@angular/core";
/** @hidden */
export declare class MbscMonthView extends MonthViewBase {
    activeDate?: number;
    amText?: string;
    calendarType?: 'year' | 'month' | 'week';
    cellTextHeight?: number;
    clickToCreate?: boolean | 'double' | 'single';
    colors?: object;
    dataTimezone?: string;
    dayNames?: string[];
    dayNamesMin?: string[];
    dayNamesShort?: string[];
    dayTemplate?: TemplateRef<any>;
    dayContentTemplate?: TemplateRef<any>;
    displayTimezone?: string;
    dragToCreate?: boolean;
    dragToResize?: boolean;
    dragToMove?: boolean;
    eventText?: string;
    events?: {
        [key: string]: MbscCalendarEvent[];
    };
    eventsText?: string;
    exclusiveEndDates?: boolean;
    firstDay?: number;
    firstPageDay?: number;
    hasMarks?: boolean;
    hoverEnd?: number;
    hoverStart?: number;
    isActive?: boolean;
    isPicker?: boolean;
    invalid?: object;
    labels?: object;
    labelHeight?: number;
    labelTemplate?: TemplateRef<any>;
    labelContentTemplate?: TemplateRef<any>;
    dragData?: ILabelDragData;
    marked?: object;
    max?: number | Date;
    min?: number | Date;
    monthNames?: string[];
    monthNamesShort?: string[];
    pmText?: string;
    rangeEnd?: number;
    rangeStart?: number;
    selectedDates?: {
        [key: number]: boolean | Date;
    };
    selectedEventsMap?: {
        [key: number]: MbscCalendarEvent;
    };
    showEventTooltip?: boolean;
    showOuter?: boolean;
    showWeekDays?: boolean;
    showWeekNumbers?: boolean;
    showSingleMark?: boolean;
    resourcesMap?: {
        [key: number]: MbscResource;
    };
    todayText?: string;
    timeFormat?: string;
    timezonePlugin?: MbscTimezonePlugin;
    valid?: object;
    variableRow?: boolean;
    weeks?: number;
    weekText?: string;
    getDate?: (y: number, m: number, d: number) => Date;
    getDay?: (d: Date) => number;
    getMonth?: (d: Date) => number;
    getWeekNumber?: (d: Date) => number;
    getYear?: (d: Date) => number;
    onDayClick?: (args: any, inst: any) => void;
    onDayDoubleClick?: (args: any, inst: any) => void;
    onDayRightClick?: (args: any, inst: any) => void;
    onDayHoverIn?: (args: any, inst: any) => void;
    onDayHoverOut?: (args: any, inst: any) => void;
    onLabelClick?: (args: any, inst: any) => void;
    onLabelDoubleClick?: (args: any, inst: any) => void;
    onLabelRightClick?: (args: any, inst: any) => void;
    onLabelHoverIn?: (args: any, inst: any) => void;
    onLabelHoverOut?: (args: any, inst: any) => void;
    onLabelDelete?: (args: any, inst: any) => void;
    onLabelUpdateStart?: (args: any, inst: any) => void;
    onLabelUpdateMove?: (args: any, inst: any) => void;
    onLabelUpdateEnd?: (args: any, inst: any) => void;
    onLabelUpdateModeOn?: (args: any, inst: any) => void;
    onLabelUpdateModeOff?: (args: any, inst: any) => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscMonthView, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscMonthView, "mbsc-month-view", never, { "activeDate": "activeDate"; "amText": "amText"; "calendarType": "calendarType"; "cellTextHeight": "cellTextHeight"; "clickToCreate": "clickToCreate"; "colors": "colors"; "dataTimezone": "dataTimezone"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "displayTimezone": "displayTimezone"; "dragToCreate": "dragToCreate"; "dragToResize": "dragToResize"; "dragToMove": "dragToMove"; "eventText": "eventText"; "events": "events"; "eventsText": "eventsText"; "exclusiveEndDates": "exclusiveEndDates"; "firstDay": "firstDay"; "firstPageDay": "firstPageDay"; "hasMarks": "hasMarks"; "hoverEnd": "hoverEnd"; "hoverStart": "hoverStart"; "isActive": "isActive"; "isPicker": "isPicker"; "invalid": "invalid"; "labels": "labels"; "labelHeight": "labelHeight"; "labelTemplate": "labelTemplate"; "labelContentTemplate": "labelContentTemplate"; "dragData": "dragData"; "marked": "marked"; "max": "max"; "min": "min"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "pmText": "pmText"; "rangeEnd": "rangeEnd"; "rangeStart": "rangeStart"; "selectedDates": "selectedDates"; "selectedEventsMap": "selectedEventsMap"; "showEventTooltip": "showEventTooltip"; "showOuter": "showOuter"; "showWeekDays": "showWeekDays"; "showWeekNumbers": "showWeekNumbers"; "showSingleMark": "showSingleMark"; "resourcesMap": "resourcesMap"; "todayText": "todayText"; "timeFormat": "timeFormat"; "timezonePlugin": "timezonePlugin"; "valid": "valid"; "variableRow": "variableRow"; "weeks": "weeks"; "weekText": "weekText"; "getDate": "getDate"; "getDay": "getDay"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "onDayClick": "onDayClick"; "onDayDoubleClick": "onDayDoubleClick"; "onDayRightClick": "onDayRightClick"; "onDayHoverIn": "onDayHoverIn"; "onDayHoverOut": "onDayHoverOut"; "onLabelClick": "onLabelClick"; "onLabelDoubleClick": "onLabelDoubleClick"; "onLabelRightClick": "onLabelRightClick"; "onLabelHoverIn": "onLabelHoverIn"; "onLabelHoverOut": "onLabelHoverOut"; "onLabelDelete": "onLabelDelete"; "onLabelUpdateStart": "onLabelUpdateStart"; "onLabelUpdateMove": "onLabelUpdateMove"; "onLabelUpdateEnd": "onLabelUpdateEnd"; "onLabelUpdateModeOn": "onLabelUpdateModeOn"; "onLabelUpdateModeOff": "onLabelUpdateModeOff"; }, {}, never, never>;
}
