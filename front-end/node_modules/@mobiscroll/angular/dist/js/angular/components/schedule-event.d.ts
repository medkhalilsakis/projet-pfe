import { EventEmitter, TemplateRef } from '@angular/core';
import { ScheduleEventBase } from '../../core/components/eventcalendar/scheduler/schedule-event';
import { MbscCalendarEventData, MbscResource, MbscSlot } from '../../core/shared/calendar-view/calendar-view.types.public';
import { MbscTimezonePlugin } from '../../core/util/datetime.types.public';
import * as i0 from "@angular/core";
export declare class MbscScheduleEvent extends ScheduleEventBase {
    bufferAfterTemplate?: TemplateRef<any>;
    bufferBeforeTemplate?: TemplateRef<any>;
    contentTemplate?: TemplateRef<any>;
    displayTimezone?: string;
    drag?: boolean;
    event: MbscCalendarEventData;
    endDay?: number;
    eventHeight?: number;
    exclusiveEndDates?: boolean;
    gridEndTime?: number;
    gridStartTime?: number;
    hasResY?: boolean;
    hidden?: boolean;
    inactive?: boolean;
    isDrag?: boolean;
    isListing?: boolean;
    isTimeline?: boolean;
    lastDay?: Date;
    resize?: boolean;
    resource?: number | string;
    resourceObj?: MbscResource;
    rtl?: boolean;
    selected?: boolean;
    singleDay?: boolean;
    slot?: number | string;
    slotObj?: MbscSlot;
    startDay?: number;
    stickyPos?: string;
    template?: TemplateRef<any>;
    theme?: string;
    timezonePlugin?: MbscTimezonePlugin;
    onClick: EventEmitter<any>;
    onDoubleClick: EventEmitter<any>;
    onRightClick: EventEmitter<any>;
    onHoverIn: EventEmitter<any>;
    onHoverOut: EventEmitter<any>;
    onDelete: EventEmitter<any>;
    onDragEnd: EventEmitter<any>;
    onDragModeOff: EventEmitter<any>;
    onDragModeOn: EventEmitter<any>;
    onDragMove: EventEmitter<any>;
    onDragStart: EventEmitter<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscScheduleEvent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscScheduleEvent, "mbsc-schedule-event", never, { "bufferAfterTemplate": "bufferAfterTemplate"; "bufferBeforeTemplate": "bufferBeforeTemplate"; "contentTemplate": "contentTemplate"; "displayTimezone": "displayTimezone"; "drag": "drag"; "event": "event"; "endDay": "endDay"; "eventHeight": "eventHeight"; "exclusiveEndDates": "exclusiveEndDates"; "gridEndTime": "gridEndTime"; "gridStartTime": "gridStartTime"; "hasResY": "hasResY"; "hidden": "hidden"; "inactive": "inactive"; "isDrag": "isDrag"; "isListing": "isListing"; "isTimeline": "isTimeline"; "lastDay": "lastDay"; "resize": "resize"; "resource": "resource"; "resourceObj": "resourceObj"; "rtl": "rtl"; "selected": "selected"; "singleDay": "singleDay"; "slot": "slot"; "slotObj": "slotObj"; "startDay": "startDay"; "stickyPos": "stickyPos"; "template": "template"; "theme": "theme"; "timezonePlugin": "timezonePlugin"; }, { "onClick": "onClick"; "onDoubleClick": "onDoubleClick"; "onRightClick": "onRightClick"; "onHoverIn": "onHoverIn"; "onHoverOut": "onHoverOut"; "onDelete": "onDelete"; "onDragEnd": "onDragEnd"; "onDragModeOff": "onDragModeOff"; "onDragModeOn": "onDragModeOn"; "onDragMove": "onDragMove"; "onDragStart": "onDragStart"; }, never, never>;
}
