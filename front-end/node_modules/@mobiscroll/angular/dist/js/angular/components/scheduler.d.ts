import { ElementRef, TemplateRef } from '@angular/core';
import { MbscNewEventData, MbscResourceClickEvent, MbscSchedulerTimezone } from '../../core/components/eventcalendar/eventcalendar.types';
import { SchedulerBase } from '../../core/components/eventcalendar/scheduler/scheduler';
import { MbscCalendarNavService } from '../../core/shared/calendar-nav/calendar-nav';
import { MbscCalendarEvent, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { computeEventResize } from '../../core/shared/calendar-view/calendar-view.util';
import { MbscDateType, MbscTimezonePlugin } from '../../core/util/datetime.types.public';
import * as i0 from "@angular/core";
export declare class MbscScheduler extends SchedulerBase {
    vScrollCont?: ElementRef;
    vGridCont?: ElementRef;
    vHeaderCont?: ElementRef;
    vAllDayCont?: ElementRef;
    vTimeCont?: ElementRef;
    allDayText?: string;
    amText?: string;
    bufferAfterTemplate?: TemplateRef<any>;
    bufferBeforeTemplate?: TemplateRef<any>;
    checkSize?: number;
    clickToCreate?: boolean | 'single' | 'double';
    colorsMap?: {
        [key: number]: MbscCalendarEvent[];
    };
    currentTimeIndicator?: boolean;
    dataTimezone?: string;
    dateFormat?: string;
    dateFormatFull?: string;
    dateFormatLong?: string;
    dayNames?: string[];
    dayNamesMin?: string[];
    dayNamesShort?: string[];
    dayTemplate?: TemplateRef<any>;
    dayContentTemplate?: TemplateRef<any>;
    events?: MbscCalendarEvent[];
    displayTimezone?: string;
    dragBetweenResources?: boolean | undefined;
    dragInTime?: boolean | undefined;
    dragTimeStep?: number;
    dragToCreate?: boolean;
    dragToMove?: boolean;
    dragToResize?: boolean;
    endDay?: number;
    endTime?: string;
    eventDragEnd?: (args: any) => void;
    eventMap: {
        [key: string]: MbscCalendarEvent[];
    };
    eventContentTemplate?: TemplateRef<any>;
    eventOrder?: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventOverlap?: boolean;
    eventTemplate?: TemplateRef<any>;
    exclusiveEndDates?: boolean;
    extendDefaultEvent?: (args: MbscNewEventData) => MbscCalendarEvent | void;
    externalDrag?: boolean;
    externalDrop?: boolean;
    firstDay?: number;
    fromText?: string;
    getDay?: (d: Date) => number;
    getDate?: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => Date;
    getMaxDayOfMonth?: (y: number, m: number) => number;
    getMonth?: (d: Date) => number;
    getWeekNumber?: (d: Date) => number;
    getYear?: (d: Date) => number;
    groupBy?: 'date' | 'resource';
    height?: number;
    immutableData?: boolean;
    invalidateEvent?: 'start-end' | 'strict';
    invalidsMap?: {
        [key: number]: MbscCalendarEvent[];
    };
    maxDate?: MbscDateType;
    navigateToEvent?: MbscCalendarEvent;
    maxEventStack?: 'all' | 'auto' | number;
    minDate?: MbscDateType;
    minEventWidth?: number;
    monthNames?: string[];
    monthNamesShort?: string[];
    moreEventsPluralText?: string;
    moreEventsText?: string;
    navService?: MbscCalendarNavService;
    newEventText?: string;
    pmText?: string;
    refDate?: MbscDateType;
    resources?: MbscResource[] | null;
    resourceTemplate?: TemplateRef<any>;
    scroll?: number;
    selected?: number;
    selectedEventsMap: {
        [key: string]: MbscCalendarEvent;
    };
    showAllDay?: boolean;
    showDays?: boolean;
    showEventBuffer?: boolean;
    showEventTooltip?: boolean;
    size?: number;
    startDay?: number;
    startTime?: string;
    timeCellStep?: number;
    timeFormat?: string;
    timeLabelStep?: number;
    timezonePlugin?: MbscTimezonePlugin;
    timezones?: Array<MbscSchedulerTimezone | string>;
    toText?: string;
    type?: 'month' | 'week' | 'day';
    width?: number;
    onCellClick: (args: any) => void;
    onCellDoubleClick: (args: any) => void;
    onCellRightClick: (args: any) => void;
    onEventClick: (args: any) => void;
    onEventDoubleClick: (args: any) => void;
    onEventRightClick: (args: any) => void;
    onEventHoverIn: (args: any) => void;
    onEventHoverOut: (args: any) => void;
    onEventDelete: (args: any) => void;
    onEventDragEnd?: (args: any) => void;
    onEventDragStart?: (args: any) => void;
    onEventDragEnter: (args: any) => void;
    onEventDragLeave: (args: any) => void;
    onMoreClick: (args: any) => void;
    onPopoverClose: (args: any) => void;
    onResourceClick?: (args: MbscResourceClickEvent) => void;
    onResourceDoubleClick?: (args: MbscResourceClickEvent) => void;
    onResourceRightClick?: (args: MbscResourceClickEvent) => void;
    onWeekDayClick?: (args: any) => void;
    _computeEventResize: typeof computeEventResize;
    _defId: string;
    set vCursorTimeCont(el: ElementRef);
    _getDayKey(index: number, day: any): number;
    _getEventKey(index: number, event: any): any;
    _getDragKey(resourceId: number | string, dateKey: string): string;
    _getId(index: number, data: any): any;
    protected _mounted(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscScheduler, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscScheduler, "mbsc-scheduler", never, { "allDayText": "allDayText"; "amText": "amText"; "bufferAfterTemplate": "bufferAfterTemplate"; "bufferBeforeTemplate": "bufferBeforeTemplate"; "checkSize": "checkSize"; "clickToCreate": "clickToCreate"; "colorsMap": "colorsMap"; "currentTimeIndicator": "currentTimeIndicator"; "dataTimezone": "dataTimezone"; "dateFormat": "dateFormat"; "dateFormatFull": "dateFormatFull"; "dateFormatLong": "dateFormatLong"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "events": "events"; "displayTimezone": "displayTimezone"; "dragBetweenResources": "dragBetweenResources"; "dragInTime": "dragInTime"; "dragTimeStep": "dragTimeStep"; "dragToCreate": "dragToCreate"; "dragToMove": "dragToMove"; "dragToResize": "dragToResize"; "endDay": "endDay"; "endTime": "endTime"; "eventDragEnd": "eventDragEnd"; "eventMap": "eventMap"; "eventContentTemplate": "eventContentTemplate"; "eventOrder": "eventOrder"; "eventOverlap": "eventOverlap"; "eventTemplate": "eventTemplate"; "exclusiveEndDates": "exclusiveEndDates"; "extendDefaultEvent": "extendDefaultEvent"; "externalDrag": "externalDrag"; "externalDrop": "externalDrop"; "firstDay": "firstDay"; "fromText": "fromText"; "getDay": "getDay"; "getDate": "getDate"; "getMaxDayOfMonth": "getMaxDayOfMonth"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "groupBy": "groupBy"; "height": "height"; "immutableData": "immutableData"; "invalidateEvent": "invalidateEvent"; "invalidsMap": "invalidsMap"; "maxDate": "maxDate"; "navigateToEvent": "navigateToEvent"; "maxEventStack": "maxEventStack"; "minDate": "minDate"; "minEventWidth": "minEventWidth"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "moreEventsPluralText": "moreEventsPluralText"; "moreEventsText": "moreEventsText"; "navService": "navService"; "newEventText": "newEventText"; "pmText": "pmText"; "refDate": "refDate"; "resources": "resources"; "resourceTemplate": "resourceTemplate"; "scroll": "scroll"; "selected": "selected"; "selectedEventsMap": "selectedEventsMap"; "showAllDay": "showAllDay"; "showDays": "showDays"; "showEventBuffer": "showEventBuffer"; "showEventTooltip": "showEventTooltip"; "size": "size"; "startDay": "startDay"; "startTime": "startTime"; "timeCellStep": "timeCellStep"; "timeFormat": "timeFormat"; "timeLabelStep": "timeLabelStep"; "timezonePlugin": "timezonePlugin"; "timezones": "timezones"; "toText": "toText"; "type": "type"; "width": "width"; "onCellClick": "onCellClick"; "onCellDoubleClick": "onCellDoubleClick"; "onCellRightClick": "onCellRightClick"; "onEventClick": "onEventClick"; "onEventDoubleClick": "onEventDoubleClick"; "onEventRightClick": "onEventRightClick"; "onEventHoverIn": "onEventHoverIn"; "onEventHoverOut": "onEventHoverOut"; "onEventDelete": "onEventDelete"; "onEventDragEnd": "onEventDragEnd"; "onEventDragStart": "onEventDragStart"; "onEventDragEnter": "onEventDragEnter"; "onEventDragLeave": "onEventDragLeave"; "onMoreClick": "onMoreClick"; "onPopoverClose": "onPopoverClose"; "onResourceClick": "onResourceClick"; "onResourceDoubleClick": "onResourceDoubleClick"; "onResourceRightClick": "onResourceRightClick"; "onWeekDayClick": "onWeekDayClick"; }, {}, never, never>;
}
