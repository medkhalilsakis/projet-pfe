{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/service-worker/fesm2022/service-worker.mjs"],
  "sourcesContent": ["/**\r\n * @license Angular v19.2.5\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i0 from '@angular/core';\nimport { ApplicationRef, Injectable, makeEnvironmentProviders, InjectionToken, Injector, provideAppInitializer, inject, NgZone, NgModule } from '@angular/core';\nimport { Observable, Subject, NEVER } from 'rxjs';\nimport { switchMap, take, filter, map } from 'rxjs/operators';\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n/**\r\n * @publicApi\r\n */\nclass NgswCommChannel {\n  serviceWorker;\n  worker;\n  registration;\n  events;\n  constructor(serviceWorker, injector) {\n    this.serviceWorker = serviceWorker;\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = new Observable(subscriber => subscriber.error(new Error(ERR_SW_NOT_SUPPORTED)));\n    } else {\n      let currentWorker = null;\n      const workerSubject = new Subject();\n      this.worker = new Observable(subscriber => {\n        if (currentWorker !== null) {\n          subscriber.next(currentWorker);\n        }\n        return workerSubject.subscribe(v => subscriber.next(v));\n      });\n      const updateController = () => {\n        const {\n          controller\n        } = serviceWorker;\n        if (controller === null) {\n          return;\n        }\n        currentWorker = controller;\n        workerSubject.next(currentWorker);\n      };\n      serviceWorker.addEventListener('controllerchange', updateController);\n      updateController();\n      this.registration = this.worker.pipe(switchMap(() => serviceWorker.getRegistration()));\n      const _events = new Subject();\n      this.events = _events.asObservable();\n      const messageListener = event => {\n        const {\n          data\n        } = event;\n        if (data?.type) {\n          _events.next(data);\n        }\n      };\n      serviceWorker.addEventListener('message', messageListener);\n      // The injector is optional to avoid breaking changes.\n      const appRef = injector?.get(ApplicationRef, null, {\n        optional: true\n      });\n      appRef?.onDestroy(() => {\n        serviceWorker.removeEventListener('controllerchange', updateController);\n        serviceWorker.removeEventListener('message', messageListener);\n      });\n    }\n  }\n  postMessage(action, payload) {\n    return new Promise(resolve => {\n      this.worker.pipe(take(1)).subscribe(sw => {\n        sw.postMessage({\n          action,\n          ...payload\n        });\n        resolve();\n      });\n    });\n  }\n  postMessageWithOperation(type, payload, operationNonce) {\n    const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n  }\n  generateNonce() {\n    return Math.round(Math.random() * 10000000);\n  }\n  eventsOfType(type) {\n    let filterFn;\n    if (typeof type === 'string') {\n      filterFn = event => event.type === type;\n    } else {\n      filterFn = event => type.includes(event.type);\n    }\n    return this.events.pipe(filter(filterFn));\n  }\n  nextEventOfType(type) {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n  waitForOperationCompleted(nonce) {\n    return new Promise((resolve, reject) => {\n      this.eventsOfType('OPERATION_COMPLETED').pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n        if (event.result !== undefined) {\n          return event.result;\n        }\n        throw new Error(event.error);\n      })).subscribe({\n        next: resolve,\n        error: reject\n      });\n    });\n  }\n  get isEnabled() {\n    return !!this.serviceWorker;\n  }\n}\n\n/**\r\n * Subscribe and listen to\r\n * [Web Push\r\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\r\n * Angular Service Worker.\r\n *\r\n * @usageNotes\r\n *\r\n * You can inject a `SwPush` instance into any component or service\r\n * as a dependency.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\r\n * The call returns a `Promise` with a new\r\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\r\n * instance.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * A request is rejected if the user denies permission, or if the browser\r\n * blocks or does not support the Push API or ServiceWorkers.\r\n * Check `SwPush.isEnabled` to confirm status.\r\n *\r\n * Invoke Push Notifications by pushing a message with the following payload.\r\n *\r\n * ```ts\r\n * {\r\n *   \"notification\": {\r\n *     \"actions\": NotificationAction[],\r\n *     \"badge\": USVString,\r\n *     \"body\": DOMString,\r\n *     \"data\": any,\r\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\r\n *     \"icon\": USVString,\r\n *     \"image\": USVString,\r\n *     \"lang\": DOMString,\r\n *     \"renotify\": boolean,\r\n *     \"requireInteraction\": boolean,\r\n *     \"silent\": boolean,\r\n *     \"tag\": DOMString,\r\n *     \"timestamp\": DOMTimeStamp,\r\n *     \"title\": DOMString,\r\n *     \"vibrate\": number[]\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Only `title` is required. See `Notification`\r\n * [instance\r\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\r\n *\r\n * While the subscription is active, Service Worker listens for\r\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\r\n * occurrences and creates\r\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\r\n * instances in response.\r\n *\r\n * Unsubscribe using `SwPush.unsubscribe()`.\r\n *\r\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\r\n * clicks on a notification. For example:\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * You can read more on handling notification clicks in the [Service worker notifications\r\n * guide](ecosystem/service-workers/push-notifications).\r\n *\r\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\r\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\r\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\r\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\r\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\r\n *\r\n * @publicApi\r\n */\nclass SwPush {\n  sw;\n  /**\r\n   * Emits the payloads of the received push notification messages.\r\n   */\n  messages;\n  /**\r\n   * Emits the payloads of the received push notification messages as well as the action the user\r\n   * interacted with. If no action was used the `action` property contains an empty string `''`.\r\n   *\r\n   * Note that the `notification` property does **not** contain a\r\n   * [Notification][Mozilla Notification] object but rather a\r\n   * [NotificationOptions](https://notifications.spec.whatwg.org/#dictdef-notificationoptions)\r\n   * object that also includes the `title` of the [Notification][Mozilla Notification] object.\r\n   *\r\n   * [Mozilla Notification]: https://developer.mozilla.org/en-US/docs/Web/API/Notification\r\n   */\n  notificationClicks;\n  /**\r\n   * Emits the currently active\r\n   * [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\r\n   * associated to the Service Worker registration or `null` if there is no subscription.\r\n   */\n  subscription;\n  /**\r\n   * True if the Service Worker is enabled (supported by the browser and enabled via\r\n   * `ServiceWorkerModule`).\r\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  pushManager = null;\n  subscriptionChanges = new Subject();\n  constructor(sw) {\n    this.sw = sw;\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n    this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(message => message.data));\n    this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n    const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n    this.subscription = new Observable(subscriber => {\n      const workerDrivenSubscription = workerDrivenSubscriptions.subscribe(subscriber);\n      const subscriptionChanges = this.subscriptionChanges.subscribe(subscriber);\n      return () => {\n        workerDrivenSubscription.unsubscribe();\n        subscriptionChanges.unsubscribe();\n      };\n    });\n  }\n  /**\r\n   * Subscribes to Web Push Notifications,\r\n   * after requesting and receiving user permission.\r\n   *\r\n   * @param options An object containing the `serverPublicKey` string.\r\n   * @returns A Promise that resolves to the new subscription object.\r\n   */\n  requestSubscription(options) {\n    if (!this.sw.isEnabled || this.pushManager === null) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions = {\n      userVisibleOnly: true\n    };\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n    return new Promise((resolve, reject) => {\n      this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1)).subscribe({\n        next: sub => {\n          this.subscriptionChanges.next(sub);\n          resolve(sub);\n        },\n        error: reject\n      });\n    });\n  }\n  /**\r\n   * Unsubscribes from Service Worker push notifications.\r\n   *\r\n   * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\r\n   *          active subscription or the unsubscribe operation fails.\r\n   */\n  unsubscribe() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const doUnsubscribe = sub => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n        this.subscriptionChanges.next(null);\n      });\n    };\n    return new Promise((resolve, reject) => {\n      this.subscription.pipe(take(1), switchMap(doUnsubscribe)).subscribe({\n        next: resolve,\n        error: reject\n      });\n    });\n  }\n  decodeBase64(input) {\n    return atob(input);\n  }\n  static ɵfac = function SwPush_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SwPush)(i0.ɵɵinject(NgswCommChannel));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SwPush,\n    factory: SwPush.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwPush, [{\n    type: Injectable\n  }], () => [{\n    type: NgswCommChannel\n  }], null);\n})();\n\n/**\r\n * Subscribe to update notifications from the Service Worker, trigger update\r\n * checks, and forcibly activate updates.\r\n *\r\n * @see {@link /ecosystem/service-workers/communications Service Worker Communication Guide}\r\n *\r\n * @publicApi\r\n */\nclass SwUpdate {\n  sw;\n  /**\r\n   * Emits a `VersionDetectedEvent` event whenever a new version is detected on the server.\r\n   *\r\n   * Emits a `VersionInstallationFailedEvent` event whenever checking for or downloading a new\r\n   * version fails.\r\n   *\r\n   * Emits a `VersionReadyEvent` event whenever a new version has been downloaded and is ready for\r\n   * activation.\r\n   */\n  versionUpdates;\n  /**\r\n   * Emits an `UnrecoverableStateEvent` event whenever the version of the app used by the service\r\n   * worker to serve this client is in a broken state that cannot be recovered from without a full\r\n   * page reload.\r\n   */\n  unrecoverable;\n  /**\r\n   * True if the Service Worker is enabled (supported by the browser and enabled via\r\n   * `ServiceWorkerModule`).\r\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  constructor(sw) {\n    this.sw = sw;\n    if (!sw.isEnabled) {\n      this.versionUpdates = NEVER;\n      this.unrecoverable = NEVER;\n      return;\n    }\n    this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY', 'NO_NEW_VERSION_DETECTED']);\n    this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n  }\n  /**\r\n   * Checks for an update and waits until the new version is downloaded from the server and ready\r\n   * for activation.\r\n   *\r\n   * @returns a promise that\r\n   * - resolves to `true` if a new version was found and is ready to be activated.\r\n   * - resolves to `false` if no new version was found\r\n   * - rejects if any error occurs\r\n   */\n  checkForUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n      nonce\n    }, nonce);\n  }\n  /**\r\n   * Updates the current client (i.e. browser tab) to the latest version that is ready for\r\n   * activation.\r\n   *\r\n   * In most cases, you should not use this method and instead should update a client by reloading\r\n   * the page.\r\n   *\r\n   * <div class=\"docs-alert docs-alert-important\">\r\n   *\r\n   * Updating a client without reloading can easily result in a broken application due to a version\r\n   * mismatch between the application shell and other page resources,\r\n   * such as lazy-loaded chunks, whose filenames may change between\r\n   * versions.\r\n   *\r\n   * Only use this method, if you are certain it is safe for your specific use case.\r\n   *\r\n   * </div>\r\n   *\r\n   * @returns a promise that\r\n   *  - resolves to `true` if an update was activated successfully\r\n   *  - resolves to `false` if no update was available (for example, the client was already on the\r\n   *    latest version).\r\n   *  - rejects if any error occurs\r\n   */\n  activateUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n      nonce\n    }, nonce);\n  }\n  static ɵfac = function SwUpdate_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SwUpdate,\n    factory: SwUpdate.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwUpdate, [{\n    type: Injectable\n  }], () => [{\n    type: NgswCommChannel\n  }], null);\n})();\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.dev/license\r\n */\nconst SCRIPT = new InjectionToken(ngDevMode ? 'NGSW_REGISTER_SCRIPT' : '');\nfunction ngswAppInitializer() {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return;\n  }\n  const options = inject(SwRegistrationOptions);\n  if (!('serviceWorker' in navigator && options.enabled !== false)) {\n    return;\n  }\n  const script = inject(SCRIPT);\n  const ngZone = inject(NgZone);\n  const appRef = inject(ApplicationRef);\n  // Set up the `controllerchange` event listener outside of\n  // the Angular zone to avoid unnecessary change detections,\n  // as this event has no impact on view updates.\n  ngZone.runOutsideAngular(() => {\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    const sw = navigator.serviceWorker;\n    const onControllerChange = () => sw.controller?.postMessage({\n      action: 'INITIALIZE'\n    });\n    sw.addEventListener('controllerchange', onControllerChange);\n    appRef.onDestroy(() => {\n      sw.removeEventListener('controllerchange', onControllerChange);\n    });\n  });\n  // Run outside the Angular zone to avoid preventing the app from stabilizing (especially\n  // given that some registration strategies wait for the app to stabilize).\n  ngZone.runOutsideAngular(() => {\n    let readyToRegister;\n    const {\n      registrationStrategy\n    } = options;\n    if (typeof registrationStrategy === 'function') {\n      readyToRegister = new Promise(resolve => registrationStrategy().subscribe(() => resolve()));\n    } else {\n      const [strategy, ...args] = (registrationStrategy || 'registerWhenStable:30000').split(':');\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister = Promise.resolve();\n          break;\n        case 'registerWithDelay':\n          readyToRegister = delayWithTimeout(+args[0] || 0);\n          break;\n        case 'registerWhenStable':\n          readyToRegister = Promise.race([appRef.whenStable(), delayWithTimeout(+args[0])]);\n          break;\n        default:\n          // Unknown strategy.\n          throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    }\n    // Don't return anything to avoid blocking the application until the SW is registered.\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n    readyToRegister.then(() => navigator.serviceWorker.register(script, {\n      scope: options.scope\n    }).catch(err => console.error('Service worker registration failed with:', err)));\n  });\n}\nfunction delayWithTimeout(timeout) {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\nfunction ngswCommChannelFactory(opts, injector) {\n  const isBrowser = !(typeof ngServerMode !== 'undefined' && ngServerMode);\n  return new NgswCommChannel(isBrowser && opts.enabled !== false ? navigator.serviceWorker : undefined, injector);\n}\n/**\r\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\r\n * `ServiceWorkerModule.register()`.\r\n *\r\n * You can use this token to define a provider that generates the registration options at runtime,\r\n * for example via a function call:\r\n *\r\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\r\n *     header=\"app.module.ts\"}\r\n *\r\n * @publicApi\r\n */\nclass SwRegistrationOptions {\n  /**\r\n   * Whether the ServiceWorker will be registered and the related services (such as `SwPush` and\r\n   * `SwUpdate`) will attempt to communicate and interact with it.\r\n   *\r\n   * Default: true\r\n   */\n  enabled;\n  /**\r\n   * A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can\r\n   * control. It will be used when calling\r\n   * [ServiceWorkerContainer#register()](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register).\r\n   */\n  scope;\n  /**\r\n   * Defines the ServiceWorker registration strategy, which determines when it will be registered\r\n   * with the browser.\r\n   *\r\n   * The default behavior of registering once the application stabilizes (i.e. as soon as there are\r\n   * no pending micro- and macro-tasks) is designed to register the ServiceWorker as soon as\r\n   * possible but without affecting the application's first time load.\r\n   *\r\n   * Still, there might be cases where you want more control over when the ServiceWorker is\r\n   * registered (for example, there might be a long-running timeout or polling interval, preventing\r\n   * the app from stabilizing). The available option are:\r\n   *\r\n   * - `registerWhenStable:<timeout>`: Register as soon as the application stabilizes (no pending\r\n   *     micro-/macro-tasks) but no later than `<timeout>` milliseconds. If the app hasn't\r\n   *     stabilized after `<timeout>` milliseconds (for example, due to a recurrent asynchronous\r\n   *     task), the ServiceWorker will be registered anyway.\r\n   *     If `<timeout>` is omitted, the ServiceWorker will only be registered once the app\r\n   *     stabilizes.\r\n   * - `registerImmediately`: Register immediately.\r\n   * - `registerWithDelay:<timeout>`: Register with a delay of `<timeout>` milliseconds. For\r\n   *     example, use `registerWithDelay:5000` to register the ServiceWorker after 5 seconds. If\r\n   *     `<timeout>` is omitted, is defaults to `0`, which will register the ServiceWorker as soon\r\n   *     as possible but still asynchronously, once all pending micro-tasks are completed.\r\n   * - An Observable factory function: A function that returns an `Observable`.\r\n   *     The function will be used at runtime to obtain and subscribe to the `Observable` and the\r\n   *     ServiceWorker will be registered as soon as the first value is emitted.\r\n   *\r\n   * Default: 'registerWhenStable:30000'\r\n   */\n  registrationStrategy;\n}\n/**\r\n * @publicApi\r\n *\r\n * Sets up providers to register the given Angular Service Worker script.\r\n *\r\n * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n * workers are not supported by the browser, and the service worker will not be registered.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [\r\n *     provideServiceWorker('ngsw-worker.js')\r\n *   ],\r\n * });\r\n * ```\r\n */\nfunction provideServiceWorker(script, options = {}) {\n  return makeEnvironmentProviders([SwPush, SwUpdate, {\n    provide: SCRIPT,\n    useValue: script\n  }, {\n    provide: SwRegistrationOptions,\n    useValue: options\n  }, {\n    provide: NgswCommChannel,\n    useFactory: ngswCommChannelFactory,\n    deps: [SwRegistrationOptions, Injector]\n  }, provideAppInitializer(ngswAppInitializer)]);\n}\n\n/**\r\n * @publicApi\r\n */\nclass ServiceWorkerModule {\n  /**\r\n   * Register the given Angular Service Worker script.\r\n   *\r\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n   * workers are not supported by the browser, and the service worker will not be registered.\r\n   */\n  static register(script, options = {}) {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [provideServiceWorker(script, options)]\n    };\n  }\n  static ɵfac = function ServiceWorkerModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ServiceWorkerModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ServiceWorkerModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SwPush, SwUpdate]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServiceWorkerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SwPush, SwUpdate]\n    }]\n  }], null, null);\n})();\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };\n"],
  "mappings": "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",
  "names": []
}
