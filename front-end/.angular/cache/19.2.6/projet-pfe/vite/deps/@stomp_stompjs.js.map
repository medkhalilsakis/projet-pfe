{
  "version": 3,
  "sources": ["../../../../../../node_modules/@stomp/stompjs/esm6/augment-websocket.js", "../../../../../../node_modules/@stomp/stompjs/esm6/byte.js", "../../../../../../node_modules/@stomp/stompjs/esm6/frame-impl.js", "../../../../../../node_modules/@stomp/stompjs/esm6/parser.js", "../../../../../../node_modules/@stomp/stompjs/esm6/types.js", "../../../../../../node_modules/@stomp/stompjs/esm6/ticker.js", "../../../../../../node_modules/@stomp/stompjs/esm6/versions.js", "../../../../../../node_modules/@stomp/stompjs/esm6/stomp-handler.js", "../../../../../../node_modules/@stomp/stompjs/esm6/client.js", "../../../../../../node_modules/@stomp/stompjs/esm6/stomp-config.js", "../../../../../../node_modules/@stomp/stompjs/esm6/stomp-headers.js", "../../../../../../node_modules/@stomp/stompjs/esm6/compatibility/heartbeat-info.js", "../../../../../../node_modules/@stomp/stompjs/esm6/compatibility/compat-client.js", "../../../../../../node_modules/@stomp/stompjs/esm6/compatibility/stomp.js"],
  "sourcesContent": ["/**\r\n * @internal\r\n */\nexport function augmentWebsocket(webSocket, debug) {\n  webSocket.terminate = function () {\n    const noOp = () => {};\n    // set all callbacks to no op\n    this.onerror = noOp;\n    this.onmessage = noOp;\n    this.onopen = noOp;\n    const ts = new Date();\n    const id = Math.random().toString().substring(2, 8); // A simulated id\n    const origOnClose = this.onclose;\n    // Track delay in actual closure of the socket\n    this.onclose = closeEvent => {\n      const delay = new Date().getTime() - ts.getTime();\n      debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n    };\n    this.close();\n    origOnClose?.call(webSocket, {\n      code: 4001,\n      reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n      wasClean: false\n    });\n  };\n}\n", "/**\r\n * Some byte values, used as per STOMP specifications.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\nexport const BYTE = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n", "import { BYTE } from './byte.js';\n/**\r\n * Frame class represents a STOMP frame.\r\n *\r\n * @internal\r\n */\nexport class FrameImpl {\n  /**\r\n   * body of the frame\r\n   */\n  get body() {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body || '';\n  }\n  /**\r\n   * body as Uint8Array\r\n   */\n  get binaryBody() {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    // At this stage it will definitely have a valid value\n    return this._binaryBody;\n  }\n  /**\r\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\r\n   *\r\n   * @internal\r\n   */\n  constructor(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues,\n      skipContentLengthHeader\n    } = params;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\r\n   * deserialize a STOMP Frame from raw data.\r\n   *\r\n   * @internal\r\n   */\n  static fromRawFrame(rawFrame, escapeHeaderValues) {\n    const headers = {};\n    const trim = str => str.replace(/^\\s+|\\s+$/g, '');\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n      if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n      headers[key] = value;\n    }\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  toString() {\n    return this.serializeCmdAndHeaders();\n  }\n  /**\r\n   * serialize this Frame in a format suitable to be passed to WebSocket.\r\n   * If the body is string the output will be string.\r\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\r\n   *\r\n   * @internal\r\n   */\n  serialize() {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n  serializeCmdAndHeaders() {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n  isBodyEmpty() {\n    return this.bodyLength() === 0;\n  }\n  bodyLength() {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n  /**\r\n   * Compute the size of a UTF-8 string by counting its number of bytes\r\n   * (and not the number of characters composing the string)\r\n   */\n  static sizeOfUTF8(s) {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n  static toUnit8Array(cmdAndHeaders, binaryBody) {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n    return uint8Frame;\n  }\n  /**\r\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\r\n   *\r\n   * @internal\r\n   */\n  static marshall(params) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n  /**\r\n   *  Escape header values\r\n   */\n  static hdrValueEscape(str) {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n  /**\r\n   * UnEscape header values\r\n   */\n  static hdrValueUnEscape(str) {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n", "/**\r\n * @internal\r\n */\nconst NULL = 0;\n/**\r\n * @internal\r\n */\nconst LF = 10;\n/**\r\n * @internal\r\n */\nconst CR = 13;\n/**\r\n * @internal\r\n */\nconst COLON = 58;\n/**\r\n * This is an evented, rec descent parser.\r\n * A stream of Octets can be passed and whenever it recognizes\r\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\r\n *\r\n * All incoming Octets are fed into _onByte function.\r\n * Depending on current state the _onByte function keeps changing.\r\n * Depending on the state it keeps accumulating into _token and _results.\r\n * State is indicated by current value of _onByte, all states are named as _collect.\r\n *\r\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\r\n * imply that all lengths are considered in bytes (instead of string lengths).\r\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\r\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\r\n *\r\n * There is no peek function on the incoming data.\r\n * When a state change occurs based on an Octet without consuming the Octet,\r\n * the Octet, after state change, is fed again (_reinjectByte).\r\n * This became possible as the state change can be determined by inspecting just one Octet.\r\n *\r\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\r\n * otherwise it is determined by NULL terminator.\r\n *\r\n * Following the standards, the command and headers are converted to Strings\r\n * and the body is returned as Octets.\r\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\r\n *\r\n * This parser does not use Regular Expressions as that can only operate on Strings.\r\n *\r\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\r\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\r\n * is pushed.\r\n *\r\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\r\n * (which is protocol version specific), and convert body to text.\r\n *\r\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\nexport class Parser {\n  constructor(onFrame, onIncomingPing) {\n    this.onFrame = onFrame;\n    this.onIncomingPing = onIncomingPing;\n    this._encoder = new TextEncoder();\n    this._decoder = new TextDecoder();\n    this._token = [];\n    this._initState();\n  }\n  parseChunk(segment, appendMissingNULLonIncoming = false) {\n    let chunk;\n    if (typeof segment === 'string') {\n      chunk = this._encoder.encode(segment);\n    } else {\n      chunk = new Uint8Array(segment);\n    }\n    // See https://github.com/stomp-js/stompjs/issues/89\n    // Remove when underlying issue is fixed.\n    //\n    // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n    if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n      const chunkWithNull = new Uint8Array(chunk.length + 1);\n      chunkWithNull.set(chunk, 0);\n      chunkWithNull[chunk.length] = 0;\n      chunk = chunkWithNull;\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < chunk.length; i++) {\n      const byte = chunk[i];\n      this._onByte(byte);\n    }\n  }\n  // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n  _collectFrame(byte) {\n    if (byte === NULL) {\n      // Ignore\n      return;\n    }\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n    this._onByte = this._collectCommand;\n    this._reinjectByte(byte);\n  }\n  _collectCommand(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n  _collectHeaders(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._setupCollectBody();\n      return;\n    }\n    this._onByte = this._collectHeaderKey;\n    this._reinjectByte(byte);\n  }\n  _reinjectByte(byte) {\n    this._onByte(byte);\n  }\n  _collectHeaderKey(byte) {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n  _collectHeaderValue(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n  _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter(header => {\n      return header[0] === 'content-length';\n    })[0];\n    if (contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n  _collectBodyNullTerminated(byte) {\n    if (byte === NULL) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n  _collectBodyFixedSize(byte) {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n  _retrievedBody() {\n    this._results.binaryBody = this._consumeTokenAsRaw();\n    try {\n      this.onFrame(this._results);\n    } catch (e) {\n      console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n    }\n    this._initState();\n  }\n  // Rec Descent Parser helpers\n  _consumeByte(byte) {\n    this._token.push(byte);\n  }\n  _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n  _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n  _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      binaryBody: undefined\n    };\n    this._token = [];\n    this._headerKey = undefined;\n    this._onByte = this._collectFrame;\n  }\n}\n", "/**\r\n * Possible states for the IStompSocket\r\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n  StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n  StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n  StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n  StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\r\n * Possible activation state\r\n */\nexport var ActivationState;\n(function (ActivationState) {\n  ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n  ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n/**\r\n * Possible reconnection wait time modes\r\n */\nexport var ReconnectionTimeMode;\n(function (ReconnectionTimeMode) {\n  ReconnectionTimeMode[ReconnectionTimeMode[\"LINEAR\"] = 0] = \"LINEAR\";\n  ReconnectionTimeMode[ReconnectionTimeMode[\"EXPONENTIAL\"] = 1] = \"EXPONENTIAL\";\n})(ReconnectionTimeMode || (ReconnectionTimeMode = {}));\n/**\r\n * Possible ticker strategies for outgoing heartbeat ping\r\n */\nexport var TickerStrategy;\n(function (TickerStrategy) {\n  TickerStrategy[\"Interval\"] = \"interval\";\n  TickerStrategy[\"Worker\"] = \"worker\";\n})(TickerStrategy || (TickerStrategy = {}));\n", "import { TickerStrategy } from './types.js';\nexport class Ticker {\n  constructor(_interval, _strategy = TickerStrategy.Interval, _debug) {\n    this._interval = _interval;\n    this._strategy = _strategy;\n    this._debug = _debug;\n    this._workerScript = `\n    var startTime = Date.now();\n    setInterval(function() {\n        self.postMessage(Date.now() - startTime);\n    }, ${this._interval});\n  `;\n  }\n  start(tick) {\n    this.stop();\n    if (this.shouldUseWorker()) {\n      this.runWorker(tick);\n    } else {\n      this.runInterval(tick);\n    }\n  }\n  stop() {\n    this.disposeWorker();\n    this.disposeInterval();\n  }\n  shouldUseWorker() {\n    return typeof Worker !== 'undefined' && this._strategy === TickerStrategy.Worker;\n  }\n  runWorker(tick) {\n    this._debug('Using runWorker for outgoing pings');\n    if (!this._worker) {\n      this._worker = new Worker(URL.createObjectURL(new Blob([this._workerScript], {\n        type: 'text/javascript'\n      })));\n      this._worker.onmessage = message => tick(message.data);\n    }\n  }\n  runInterval(tick) {\n    this._debug('Using runInterval for outgoing pings');\n    if (!this._timer) {\n      const startTime = Date.now();\n      this._timer = setInterval(() => {\n        tick(Date.now() - startTime);\n      }, this._interval);\n    }\n  }\n  disposeWorker() {\n    if (this._worker) {\n      this._worker.terminate();\n      delete this._worker;\n      this._debug('Outgoing ping disposeWorker');\n    }\n  }\n  disposeInterval() {\n    if (this._timer) {\n      clearInterval(this._timer);\n      delete this._timer;\n      this._debug('Outgoing ping disposeInterval');\n    }\n  }\n}\n", "/**\r\n * Supported STOMP versions\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class Versions {\n  /**\r\n   * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\r\n   *\r\n   * You will be creating an instance of this class if you want to override\r\n   * supported versions to be declared during STOMP handshake.\r\n   */\n  constructor(versions) {\n    this.versions = versions;\n  }\n  /**\r\n   * Used as part of CONNECT STOMP Frame\r\n   */\n  supportedVersions() {\n    return this.versions.join(',');\n  }\n  /**\r\n   * Used while creating a WebSocket\r\n   */\n  protocolVersions() {\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n/**\r\n * Indicates protocol version 1.0\r\n */\nVersions.V1_0 = '1.0';\n/**\r\n * Indicates protocol version 1.1\r\n */\nVersions.V1_1 = '1.1';\n/**\r\n * Indicates protocol version 1.2\r\n */\nVersions.V1_2 = '1.2';\n/**\r\n * @internal\r\n */\nVersions.default = new Versions([Versions.V1_2, Versions.V1_1, Versions.V1_0]);\n", "import { augmentWebsocket } from './augment-websocket.js';\nimport { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { Ticker } from './ticker.js';\nimport { StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\r\n * The STOMP protocol handler\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\nexport class StompHandler {\n  get connectedVersion() {\n    return this._connectedVersion;\n  }\n  get connected() {\n    return this._connected;\n  }\n  constructor(_client, _webSocket, config) {\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._connected = false;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: frame => {\n        this.debug(`connected to server ${frame.headers.server}`);\n        this._connected = true;\n        this._connectedVersion = frame.headers.version;\n        // STOMP version 1.2 needs header values to be escaped\n        if (this._connectedVersion === Versions.V1_2) {\n          this._escapeHeaderValues = true;\n        }\n        this._setupHeartbeat(frame.headers);\n        this.onConnect(frame);\n      },\n      // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: frame => {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](https://www.rabbitmq.com/stomp.html)).\n        const subscription = frame.headers.subscription;\n        const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n        // bless the frame to be a Message\n        const message = frame;\n        const client = this;\n        const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n        // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n        message.ack = (headers = {}) => {\n          return client.ack(messageId, subscription, headers);\n        };\n        message.nack = (headers = {}) => {\n          return client.nack(messageId, subscription, headers);\n        };\n        onReceive(message);\n      },\n      // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: frame => {\n        const callback = this._receiptWatchers[frame.headers['receipt-id']];\n        if (callback) {\n          callback(frame);\n          // Server will acknowledge only once, remove the callback\n          delete this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: frame => {\n        this.onStompError(frame);\n      }\n    };\n    // used to index subscribers\n    this._counter = 0;\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.debug = config.debug;\n    this.stompVersions = config.stompVersions;\n    this.connectHeaders = config.connectHeaders;\n    this.disconnectHeaders = config.disconnectHeaders;\n    this.heartbeatIncoming = config.heartbeatIncoming;\n    this.heartbeatOutgoing = config.heartbeatOutgoing;\n    this.splitLargeFrames = config.splitLargeFrames;\n    this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n    this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n    this.logRawCommunication = config.logRawCommunication;\n    this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n    this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n    this.onConnect = config.onConnect;\n    this.onDisconnect = config.onDisconnect;\n    this.onStompError = config.onStompError;\n    this.onWebSocketClose = config.onWebSocketClose;\n    this.onWebSocketError = config.onWebSocketError;\n    this.onUnhandledMessage = config.onUnhandledMessage;\n    this.onUnhandledReceipt = config.onUnhandledReceipt;\n    this.onUnhandledFrame = config.onUnhandledFrame;\n  }\n  start() {\n    const parser = new Parser(\n    // On Frame\n    rawFrame => {\n      const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n      // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n      if (!this.logRawCommunication) {\n        this.debug(`<<< ${frame}`);\n      }\n      const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n      serverFrameHandler(frame);\n    },\n    // On Incoming Ping\n    () => {\n      this.debug('<<< PONG');\n    });\n    this._webSocket.onmessage = evt => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n      if (this.logRawCommunication) {\n        const rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n    this._webSocket.onclose = closeEvent => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n    this._webSocket.onerror = errorEvent => {\n      this.onWebSocketError(errorEvent);\n    };\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = Object.assign({}, this.connectHeaders);\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({\n        command: 'CONNECT',\n        headers: connectHeaders\n      });\n    };\n  }\n  _setupHeartbeat(headers) {\n    if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n      return;\n    }\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat'].split(',').map(v => parseInt(v, 10));\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = new Ticker(ttl, this._client.heartbeatStrategy, this.debug);\n      this._pinger.start(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      });\n    }\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n  _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug('Discarding websocket, the underlying socket may linger for a while');\n      this.discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n  forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n  _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n  discardWebsocket() {\n    if (typeof this._webSocket.terminate !== 'function') {\n      augmentWebsocket(this._webSocket, msg => this.debug(msg));\n    }\n    // @ts-ignore - this method will be there at this stage\n    this._webSocket.terminate();\n  }\n  _transmit(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader\n    });\n    let rawChunk = frame.serialize();\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n  dispose() {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({\n          command: 'DISCONNECT',\n          headers: disconnectHeaders\n        });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeWebsocket();\n      }\n    }\n  }\n  _cleanUp() {\n    this._connected = false;\n    if (this._pinger) {\n      this._pinger.stop();\n      this._pinger = undefined;\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n      this._ponger = undefined;\n    }\n  }\n  publish(params) {\n    const {\n      destination,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const hdrs = Object.assign({\n      destination\n    }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    });\n  }\n  watchForReceipt(receiptId, callback) {\n    this._receiptWatchers[receiptId] = callback;\n  }\n  subscribe(destination, callback, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({\n      command: 'SUBSCRIBE',\n      headers\n    });\n    const client = this;\n    return {\n      id: headers.id,\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n  unsubscribe(id, headers = {}) {\n    headers = Object.assign({}, headers);\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({\n      command: 'UNSUBSCRIBE',\n      headers\n    });\n  }\n  begin(transactionId) {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit() {\n        client.commit(txId);\n      },\n      abort() {\n        client.abort(txId);\n      }\n    };\n  }\n  commit(transactionId) {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  abort(transactionId) {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  ack(messageId, subscriptionId, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({\n      command: 'ACK',\n      headers\n    });\n  }\n  nack(messageId, subscriptionId, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({\n      command: 'NACK',\n      headers\n    });\n  }\n}\n", "import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy } from './types.js';\nimport { Versions } from './versions.js';\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class Client {\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\r\n   * Disconnection headers.\r\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\r\n   * Create an instance.\r\n   */\n  constructor(conf = {}) {\n    /**\r\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n     *\r\n     * Example:\r\n     * ```javascript\r\n     *        // Try only versions 1.1 and 1.0\r\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n     * ```\r\n     */\n    this.stompVersions = Versions.default;\n    /**\r\n     * Will retry if Stomp connection is not established in specified milliseconds.\r\n     * Default 0, which switches off automatic reconnection.\r\n     */\n    this.connectionTimeout = 0;\n    /**\r\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n     */\n    this.reconnectDelay = 5000;\n    /**\r\n     * tracking the time to the next reconnection. Initialized to [Client#reconnectDelay]{@link Client#reconnectDelay}'s value and it may\r\n     * change depending on the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} setting\r\n     */\n    this._nextReconnectDelay = 0;\n    /**\r\n     * Maximum time to wait between reconnects, in milliseconds. Defaults to 15 minutes.\r\n     * Only relevant when [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} not LINEAR (e.g., EXPONENTIAL).\r\n     * Set to 0 for no limit on wait time.\r\n     */\n    this.maxReconnectDelay = 15 * 60 * 1000; // 15 minutes in ms\n    /**\r\n     * Reconnection wait time mode, either linear (default) or exponential.\r\n     * Note: See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay} for setting the maximum delay when exponential\r\n     *\r\n     * ```javascript\r\n     * client.configure({\r\n     *   reconnectTimeMode: ReconnectionTimeMode.EXPONENTIAL,\r\n     *   reconnectDelay: 200, // It will wait 200, 400, 800 ms...\r\n     *   maxReconnectDelay: 10000, // Optional, when provided, it will not wait more that these ms\r\n     * })\r\n     * ```\r\n     */\n    this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n    /**\r\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatIncoming = 10000;\n    /**\r\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\r\n     * Outgoing heartbeat strategy.\r\n     * See https://github.com/stomp-js/stompjs/pull/579\r\n     *\r\n     * Can be worker or interval strategy, but will always use `interval`\r\n     * if web workers are unavailable, for example, in a non-browser environment.\r\n     *\r\n     * Using Web Workers may work better on long-running pages\r\n     * and mobile apps, as the browser may suspend Timers in the main page.\r\n     * Try the `Worker` mode if you discover disconnects when the browser tab is in the background.\r\n     *\r\n     * When used in a JS environment, use 'worker' or 'interval' as valid values.\r\n     *\r\n     * Defaults to `interval` strategy.\r\n     */\n    this.heartbeatStrategy = TickerStrategy.Interval;\n    /**\r\n     * This switches on a non-standard behavior while sending WebSocket packets.\r\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n     * Only Java Spring brokers seem to support this mode.\r\n     *\r\n     * WebSockets, by itself, split large (text) packets,\r\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n     * Setting it for such a broker will cause large messages to fail.\r\n     *\r\n     * `false` by default.\r\n     *\r\n     * Binary frames are never split.\r\n     */\n    this.splitLargeFrames = false;\n    /**\r\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\r\n     * Usually the\r\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n     * is automatically decided by type of the payload.\r\n     * Default is `false`, which should work with all compliant brokers.\r\n     *\r\n     * Set this flag to force binary frames.\r\n     */\n    this.forceBinaryWSFrames = false;\n    /**\r\n     * A bug in ReactNative chops a string on occurrence of a NULL.\r\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n     * This makes incoming WebSocket messages invalid STOMP packets.\r\n     * Setting this flag attempts to reverse the damage by appending a NULL.\r\n     * If the broker splits a large message into multiple WebSocket messages,\r\n     * this flag will cause data loss and abnormal termination of connection.\r\n     *\r\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\r\n     * Browsers do not immediately close WebSockets when `.close` is issued.\r\n     * This may cause reconnection to take a significantly long time in case\r\n     *  of some types of failures.\r\n     * In case of incoming heartbeat failure, this experimental flag instructs\r\n     * the library to discard the socket immediately\r\n     * (even before it is actually closed).\r\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\r\n     * Activation state.\r\n     *\r\n     * It will usually be ACTIVE or INACTIVE.\r\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\r\n   * Update configuration.\r\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n    // Warn on incorrect maxReconnectDelay settings\n    if (this.maxReconnectDelay > 0 && this.maxReconnectDelay < this.reconnectDelay) {\n      this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n      this.maxReconnectDelay = this.reconnectDelay;\n    }\n  }\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect. If the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\r\n   * is set to EXPONENTIAL it will increase the wait time exponentially\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n      this._changeState(ActivationState.ACTIVE);\n      this._nextReconnectDelay = this.reconnectDelay;\n      this._connect();\n    };\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n  async _connect() {\n    await this.beforeConnect(this);\n    if (this._stompHandler) {\n      this.debug('There is already a stompHandler, skipping the call to connect');\n      return;\n    }\n    if (!this.active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n    // setup connection watcher\n    if (this.connectionTimeout > 0) {\n      // clear first\n      if (this._connectionWatcher) {\n        clearTimeout(this._connectionWatcher);\n      }\n      this._connectionWatcher = setTimeout(() => {\n        if (this.connected) {\n          return;\n        }\n        // Connection not established, close the underlying socket\n        // a reconnection will be attempted\n        this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n        this.forceDisconnect();\n      }, this.connectionTimeout);\n    }\n    this.debug('Opening Web Socket...');\n    // Get the actual WebSocket (or a similar object)\n    const webSocket = this._createWebSocket();\n    this._stompHandler = new StompHandler(this, webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      heartbeatStrategy: this.heartbeatStrategy,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n      onConnect: frame => {\n        // Successfully connected, stop the connection watcher\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n          this._connectionWatcher = undefined;\n        }\n        if (!this.active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: frame => {\n        this.onDisconnect(frame);\n      },\n      onStompError: frame => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: evt => {\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\n        if (this.state === ActivationState.DEACTIVATING) {\n          // Mark deactivation complete\n          this._changeState(ActivationState.INACTIVE);\n        }\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        this.onWebSocketClose(evt);\n        if (this.active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: evt => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: message => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: frame => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: frame => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n    this._stompHandler.start();\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this._nextReconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n          this._nextReconnectDelay = this._nextReconnectDelay * 2;\n          // Truncated exponential backoff with a set limit unless disabled\n          if (this.maxReconnectDelay !== 0) {\n            this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n          }\n        }\n        this._connect();\n      }, this._nextReconnectDelay);\n    }\n  }\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\n  async deactivate(options = {}) {\n    const force = options.force || false;\n    const needToDispose = this.active;\n    let retPromise;\n    if (this.state === ActivationState.INACTIVE) {\n      this.debug(`Already INACTIVE, nothing more to do`);\n      return Promise.resolve();\n    }\n    this._changeState(ActivationState.DEACTIVATING);\n    // Reset reconnection timer just to be safe\n    this._nextReconnectDelay = 0;\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n      this._reconnector = undefined;\n    }\n    if (this._stompHandler &&\n    // @ts-ignore - if there is a _stompHandler, there is the webSocket\n    this.webSocket.readyState !== StompSocketState.CLOSED) {\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n      // we need to wait for the underlying websocket to close\n      retPromise = new Promise((resolve, reject) => {\n        // @ts-ignore - there is a _stompHandler\n        this._stompHandler.onWebSocketClose = evt => {\n          origOnWebSocketClose(evt);\n          resolve();\n        };\n      });\n    } else {\n      // indicate that auto reconnect loop should terminate\n      this._changeState(ActivationState.INACTIVE);\n      return Promise.resolve();\n    }\n    if (force) {\n      this._stompHandler?.discardWebsocket();\n    } else if (needToDispose) {\n      this._disposeStompHandler();\n    }\n    return retPromise;\n  }\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\n  publish(params) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\n  unsubscribe(id, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\n  begin(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\n  commit(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\n  abort(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}\n", "/**\r\n * Configuration options for STOMP Client, each key corresponds to\r\n * field by the same name in {@link Client}. This can be passed to\r\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class StompConfig {}\n", "/**\r\n * STOMP headers. Many functions calls will accept headers as parameters.\r\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\r\n *\r\n * `key` and `value` must be valid strings.\r\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class StompHeaders {}\n", "/**\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\nexport class HeartbeatInfo {\n  constructor(client) {\n    this.client = client;\n  }\n  get outgoing() {\n    return this.client.heartbeatOutgoing;\n  }\n  set outgoing(value) {\n    this.client.heartbeatOutgoing = value;\n  }\n  get incoming() {\n    return this.client.heartbeatIncoming;\n  }\n  set incoming(value) {\n    this.client.heartbeatIncoming = value;\n  }\n}\n", "import { Client } from '../client.js';\nimport { HeartbeatInfo } from './heartbeat-info.js';\n/**\r\n * Available for backward compatibility, please shift to using {@link Client}.\r\n *\r\n * **Deprecated**\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\r\n */\nexport class CompatClient extends Client {\n  /**\r\n   * Available for backward compatibility, please shift to using {@link Client}\r\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * @internal\r\n   */\n  constructor(webSocketFactory) {\n    super();\n    /**\r\n     * It is no op now. No longer needed. Large packets work out of the box.\r\n     */\n    this.maxWebSocketFrameSize = 16 * 1024;\n    this._heartbeatInfo = new HeartbeatInfo(this);\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message) => {\n      console.log(...message);\n    };\n  }\n  _parseConnect(...args) {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers = {};\n    if (args.length < 2) {\n      throw new Error('Connect requires at least 2 arguments');\n    }\n    if (typeof args[1] === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\r\n   * version with headers to pass your broker specific options.\r\n   *\r\n   * overloads:\r\n   * - connect(headers, connectCallback)\r\n   * - connect(headers, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\r\n   *\r\n   * params:\r\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\r\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\r\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\r\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\r\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  connect(...args) {\n    const out = this._parseConnect(...args);\n    if (out[0]) {\n      this.connectHeaders = out[0];\n    }\n    if (out[1]) {\n      this.onConnect = out[1];\n    }\n    if (out[2]) {\n      this.onStompError = out[2];\n    }\n    if (out[3]) {\n      this.onWebSocketClose = out[3];\n    }\n    super.activate();\n  }\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * See:\r\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\r\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  disconnect(disconnectCallback, headers = {}) {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n    super.deactivate();\n  }\n  /**\r\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\r\n   *\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\r\n   * However, there may be special purpose headers corresponding to your STOMP broker.\r\n   *\r\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\r\n   *\r\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\r\n   *\r\n   * ```javascript\r\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\r\n   *\r\n   *        // If you want to send a message with a body, you must also pass the headers argument.\r\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\r\n   * ```\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\n  send(destination, headers = {}, body = '') {\n    headers = Object.assign({}, headers);\n    const skipContentLengthHeader = headers['content-length'] === false;\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers,\n      body,\n      skipContentLengthHeader\n    });\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set reconnect_delay(value) {\n    this.reconnectDelay = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get ws() {\n    return this.webSocket;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get onreceive() {\n    return this.onUnhandledMessage;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set onreceive(value) {\n    this.onUnhandledMessage = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get onreceipt() {\n    return this.onUnhandledReceipt;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set onreceipt(value) {\n    this.onUnhandledReceipt = value;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\n  set heartbeat(value) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n", "import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\n/**\r\n * STOMP Class, acts like a factory to create {@link Client}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * **Deprecated**\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}.\r\n */\nexport class Stomp {\n  /**\r\n   * This method creates a WebSocket client that is connected to\r\n   * the STOMP server located at the url.\r\n   *\r\n   * ```javascript\r\n   *        var url = \"ws://localhost:61614/stomp\";\r\n   *        var client = Stomp.client(url);\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\n  static client(url, protocols) {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n    return new CompatClient(wsFn);\n  }\n  /**\r\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\r\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\r\n   * a similar object).\r\n   *\r\n   * In order to support reconnection, the function Client._connect should be callable more than once.\r\n   * While reconnecting\r\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\r\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\r\n   *\r\n   * ```javascript\r\n   *        var client = Stomp.over(function(){\r\n   *          return new WebSocket('ws://localhost:15674/ws')\r\n   *        });\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\n  static over(ws) {\n    let wsFn;\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n      wsFn = () => ws;\n    }\n    return new CompatClient(wsFn);\n  }\n}\n/**\r\n * In case you need to use a non standard class for WebSocket.\r\n *\r\n * For example when using within NodeJS environment:\r\n *\r\n * ```javascript\r\n *        StompJs = require('../../esm5/');\r\n *        Stomp = StompJs.Stomp;\r\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\r\n * ```\r\n *\r\n * **Deprecated**\r\n *\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}\r\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n */\n// tslint:disable-next-line:variable-name\nStomp.WebSocketClass = null;\n"],
  "mappings": "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",
  "names": ["StompSocketState", "ActivationState", "ReconnectionTimeMode", "TickerStrategy"]
}
